

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Oct 26 22:31:24 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21  0000                     
    22                           	psect	idataCOMRAM
    23  001214                     __pidataCOMRAM:
    24                           	opt stack 0
    25                           
    26                           ;initializer for _ScanLine
    27  001214  01                 	db	1
    28  001215  02                 	db	2
    29  001216  04                 	db	4
    30  001217  08                 	db	8
    31                           
    32                           	psect	smallconst
    33  000800                     __psmallconst:
    34                           	opt stack 0
    35  000800  00                 	db	0
    36  000801                     _MQ:
    37                           	opt stack 0
    38  000801  01                 	db	1
    39  000802  02                 	db	2
    40  000803  04                 	db	4
    41  000804  08                 	db	8
    42  000805  00                 	db	0
    43  000806  00                 	db	0
    44  000807  00                 	db	0
    45  000808  00                 	db	0
    46  000809  00                 	db	0
    47  00080A  00                 	db	0
    48  00080B  00                 	db	0
    49  00080C  00                 	db	0
    50  00080D  00                 	db	0
    51  00080E  00                 	db	0
    52  00080F  00                 	db	0
    53  000810  00                 	db	0
    54  000811  08                 	db	8
    55  000812  00                 	db	0
    56  000813  00                 	db	0
    57  000814  00                 	db	0
    58  000815  00                 	db	0
    59  000816  00                 	db	0
    60  000817  00                 	db	0
    61  000818  01                 	db	1
    62  000819  00                 	db	0
    63  00081A  00                 	db	0
    64  00081B  00                 	db	0
    65  00081C  00                 	db	0
    66  00081D  00                 	db	0
    67  00081E  08                 	db	8
    68  00081F  00                 	db	0
    69  000820  00                 	db	0
    70  000821  00                 	db	0
    71  000822  00                 	db	0
    72  000823  01                 	db	1
    73  000824  00                 	db	0
    74  000825  00                 	db	0
    75  000826  00                 	db	0
    76  000827  00                 	db	0
    77  000828  00                 	db	0
    78  000829  00                 	db	0
    79  00082A  00                 	db	0
    80  00082B  08                 	db	8
    81  00082C  10                 	db	16
    82  00082D  20                 	db	32
    83  00082E  01                 	db	1
    84  00082F  00                 	db	0
    85  000830  00                 	db	0
    86  000831                     __end_of_MQ:
    87                           	opt stack 0
    88  000831                     _LED:
    89                           	opt stack 0
    90  000831  3F                 	db	63
    91  000832  06                 	db	6
    92  000833  5B                 	db	91
    93  000834  4F                 	db	79
    94  000835  66                 	db	102
    95  000836  6D                 	db	109
    96  000837  7D                 	db	125
    97  000838  07                 	db	7
    98  000839  7F                 	db	127
    99  00083A  6F                 	db	111
   100  00083B  BF                 	db	191
   101  00083C  86                 	db	134
   102  00083D  DB                 	db	219
   103  00083E  CF                 	db	207
   104  00083F  E6                 	db	230
   105  000840  ED                 	db	237
   106  000841  FD                 	db	253
   107  000842  87                 	db	135
   108  000843  FF                 	db	255
   109  000844  EF                 	db	239
   110  000845                     __end_of_LED:
   111                           	opt stack 0
   112  000845                     _KeyMap:
   113                           	opt stack 0
   114  000845  01                 	db	1
   115  000846  05                 	db	5
   116  000847  09                 	db	9
   117  000848  0D                 	db	13
   118  000849  02                 	db	2
   119  00084A  06                 	db	6
   120  00084B  0A                 	db	10
   121  00084C  0E                 	db	14
   122  00084D  03                 	db	3
   123  00084E  07                 	db	7
   124  00084F  0B                 	db	11
   125  000850  0F                 	db	15
   126  000851  04                 	db	4
   127  000852  08                 	db	8
   128  000853  0C                 	db	12
   129  000854  00                 	db	0
   130  000855                     __end_of_KeyMap:
   131                           	opt stack 0
   132  0000                     _ADCON1	set	4033
   133  0000                     _INTCONbits	set	4082
   134  0000                     _LATB	set	3978
   135  0000                     _LATD	set	3980
   136  0000                     _PORTB	set	3969
   137  0000                     _PORTD	set	3971
   138  0000                     _PORTE	set	3972
   139  0000                     _T0CONbits	set	4053
   140  0000                     _TMR0H	set	4055
   141  0000                     _TMR0L	set	4054
   142  0000                     _TRISAbits	set	3986
   143  0000                     _TRISD	set	3989
   144  0000                     _TMR0IE	set	32661
   145  0000                     _TMR0IF	set	32658
   146  0000                     _TRISB0	set	31896
   147  0000                     _TRISB1	set	31897
   148  0000                     _TRISB2	set	31898
   149  0000                     _TRISB3	set	31899
   150  0000                     _TRISB4	set	31900
   151  0000                     _TRISB5	set	31901
   152  0000                     _TRISB6	set	31902
   153  0000                     _TRISB7	set	31903
   154  0000                     _TRISC6	set	31910
   155  0000                     _TRISC7	set	31911
   156  0000                     _TRISE0	set	31920
   157  0000                     _TRISE1	set	31921
   158  0000                     _TRISE2	set	31922
   159                           
   160                           ; #config settings
   161  000855  00                 	db	0	; dummy byte at the end
   162  0000                     
   163                           	psect	cinit
   164  0011DA                     __pcinit:
   165                           	opt stack 0
   166  0011DA                     start_initialization:
   167                           	opt stack 0
   168  0011DA                     __initialization:
   169                           	opt stack 0
   170                           
   171                           ; Clear objects allocated to COMRAM (45 bytes)
   172  0011DA  EE00  F001         	lfsr	0,__pbssCOMRAM
   173  0011DE  0E2D               	movlw	45
   174  0011E0                     clear_0:
   175  0011E0  6AEE               	clrf	postinc0,c
   176  0011E2  06E8               	decf	wreg,f,c
   177  0011E4  E1FD               	bnz	clear_0
   178                           
   179                           ; Initialize objects allocated to COMRAM (4 bytes)
   180                           ; load TBLPTR registers with __pidataCOMRAM
   181  0011E6  0E14               	movlw	low __pidataCOMRAM
   182  0011E8  6EF6               	movwf	tblptrl,c
   183  0011EA  0E12               	movlw	high __pidataCOMRAM
   184  0011EC  6EF7               	movwf	tblptrh,c
   185  0011EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   186  0011F0  6EF8               	movwf	tblptru,c
   187  0011F2  EE00  F04C         	lfsr	0,__pdataCOMRAM
   188  0011F6  EE10 F004          	lfsr	1,4
   189  0011FA                     copy_data0:
   190  0011FA  0009               	tblrd		*+
   191  0011FC  CFF5 FFEE          	movff	tablat,postinc0
   192  001200  50E5               	movf	postdec1,w,c
   193  001202  50E1               	movf	fsr1l,w,c
   194  001204  E1FA               	bnz	copy_data0
   195  001206                     end_of_initialization:
   196                           	opt stack 0
   197  001206                     __end_of__initialization:
   198                           	opt stack 0
   199  001206  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   200  001208  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   201  00120A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   202  00120C  6EF8               	movwf	tblptru,c
   203  00120E  0100               	movlb	0
   204  001210  EF2B  F004         	goto	_main	;jump to C main() function
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           tblptrl	equ	0xFF6
   208                           tablat	equ	0xFF5
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           postdec1	equ	0xFE5
   212                           fsr1l	equ	0xFE1
   213                           
   214                           	psect	bssCOMRAM
   215  000001                     __pbssCOMRAM:
   216                           	opt stack 0
   217  000001                     _disp:
   218                           	opt stack 0
   219  000001                     	ds	4
   220  000005                     _Timer250m:
   221                           	opt stack 0
   222  000005                     	ds	2
   223  000007                     _a:
   224                           	opt stack 0
   225  000007                     	ds	2
   226  000009                     _col:
   227                           	opt stack 0
   228  000009                     	ds	2
   229  00000B                     _e:
   230                           	opt stack 0
   231  00000B                     	ds	2
   232  00000D                     _ggg:
   233                           	opt stack 0
   234  00000D                     	ds	2
   235  00000F                     _hur:
   236                           	opt stack 0
   237  00000F                     	ds	2
   238  000011                     _i:
   239                           	opt stack 0
   240  000011                     	ds	2
   241  000013                     _inval:
   242                           	opt stack 0
   243  000013                     	ds	2
   244  000015                     _kcode:
   245                           	opt stack 0
   246  000015                     	ds	2
   247  000017                     _keypress:
   248                           	opt stack 0
   249  000017                     	ds	2
   250  000019                     _min:
   251                           	opt stack 0
   252  000019                     	ds	2
   253  00001B                     _mq:
   254                           	opt stack 0
   255  00001B                     	ds	2
   256  00001D                     _r:
   257                           	opt stack 0
   258  00001D                     	ds	2
   259  00001F                     _row:
   260                           	opt stack 0
   261  00001F                     	ds	2
   262  000021                     _rowkey:
   263                           	opt stack 0
   264  000021                     	ds	2
   265  000023                     _rrr:
   266                           	opt stack 0
   267  000023                     	ds	2
   268  000025                     _sec:
   269                           	opt stack 0
   270  000025                     	ds	2
   271  000027                     _t:
   272                           	opt stack 0
   273  000027                     	ds	2
   274  000029                     _OutPortB:
   275                           	opt stack 0
   276  000029                     	ds	1
   277  00002A                     _T0Flag:
   278                           	opt stack 0
   279  00002A                     	ds	1
   280  00002B                     _Timer10m:
   281                           	opt stack 0
   282  00002B                     	ds	1
   283  00002C                     _Timer500m:
   284                           	opt stack 0
   285  00002C                     	ds	1
   286  00002D                     _pwmbuf:
   287                           	opt stack 0
   288  00002D                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec1	equ	0xFE5
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	dataCOMRAM
   299  00004C                     __pdataCOMRAM:
   300                           	opt stack 0
   301  00004C                     _ScanLine:
   302                           	opt stack 0
   303  00004C                     	ds	4
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           postdec1	equ	0xFE5
   311                           fsr1l	equ	0xFE1
   312                           
   313                           	psect	cstackCOMRAM
   314  00002E                     __pcstackCOMRAM:
   315                           	opt stack 0
   316  00002E                     ??_HighISR:
   317                           
   318                           ; 0 bytes @ 0x0
   319  00002E                     	ds	14
   320  00003C                     ?___awdiv:
   321                           	opt stack 0
   322  00003C                     ?___lwdiv:
   323                           	opt stack 0
   324  00003C                     ___awdiv@dividend:
   325                           	opt stack 0
   326  00003C                     ___lwdiv@dividend:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0xE
   330  00003C                     	ds	2
   331  00003E                     ___awdiv@divisor:
   332                           	opt stack 0
   333  00003E                     ___lwdiv@divisor:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x10
   337  00003E                     	ds	2
   338  000040                     ___awdiv@counter:
   339                           	opt stack 0
   340  000040                     ___lwdiv@quotient:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x12
   344  000040                     	ds	1
   345  000041                     ___awdiv@sign:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x13
   349  000041                     	ds	1
   350  000042                     ___lwdiv@counter:
   351                           	opt stack 0
   352  000042                     ___awdiv@quotient:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x14
   356  000042                     	ds	1
   357  000043                     ?___lwmod:
   358                           	opt stack 0
   359  000043                     ___lwmod@dividend:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x15
   363  000043                     	ds	1
   364  000044                     ?___awmod:
   365                           	opt stack 0
   366  000044                     ___awmod@dividend:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x16
   370  000044                     	ds	1
   371  000045                     ___lwmod@divisor:
   372                           	opt stack 0
   373                           
   374                           ; 2 bytes @ 0x17
   375  000045                     	ds	1
   376  000046                     ___awmod@divisor:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x18
   380  000046                     	ds	1
   381  000047                     ___lwmod@counter:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x19
   385  000047                     	ds	1
   386  000048                     ___awmod@counter:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x1A
   390  000048                     	ds	1
   391  000049                     ___awmod@sign:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x1B
   395  000049                     	ds	1
   396  00004A                     ??_main:
   397                           
   398                           ; 0 bytes @ 0x1C
   399  00004A                     	ds	2
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409 ;;
   410 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   411 ;;
   412 ;; *************** function _main *****************
   413 ;; Defined at:
   414 ;;		line 67 in file "4-7seg.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;		None
   419 ;; Return value:  Size  Location     Type
   420 ;;		None               void
   421 ;; Registers used:
   422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   428 ;;      Params:         0       0       0       0       0       0       0       0       0
   429 ;;      Locals:         0       0       0       0       0       0       0       0       0
   430 ;;      Temps:          2       0       0       0       0       0       0       0       0
   431 ;;      Totals:         2       0       0       0       0       0       0       0       0
   432 ;;Total ram usage:        2 bytes
   433 ;; Hardware stack levels required when called:    2
   434 ;; This function calls:
   435 ;;		___awdiv
   436 ;;		___awmod
   437 ;;		___lwdiv
   438 ;;		___lwmod
   439 ;; This function is called by:
   440 ;;		Startup code after reset
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text0
   445  000856                     __ptext0:
   446                           	opt stack 0
   447  000856                     _main:
   448                           	opt stack 29
   449                           
   450                           ;4-7seg.c: 69: ADCON1=0x0A;
   451                           
   452                           ;incstack = 0
   453  000856  0E0A               	movlw	10
   454  000858  6EC1               	movwf	4033,c	;volatile
   455                           
   456                           ;4-7seg.c: 70: T0CONbits.T08BIT = 0;
   457  00085A  9CD5               	bcf	4053,6,c	;volatile
   458                           
   459                           ;4-7seg.c: 71: T0CONbits.T0CS = 0;
   460  00085C  9AD5               	bcf	4053,5,c	;volatile
   461                           
   462                           ;4-7seg.c: 72: T0CONbits.T0SE = 0;
   463  00085E  98D5               	bcf	4053,4,c	;volatile
   464                           
   465                           ;4-7seg.c: 73: T0CONbits.PSA = 0;
   466  000860  96D5               	bcf	4053,3,c	;volatile
   467                           
   468                           ;4-7seg.c: 74: T0CONbits.T0PS = 0x07;
   469  000862  80D5               	bsf	4053,0,c	;volatile
   470  000864  82D5               	bsf	4053,1,c	;volatile
   471  000866  84D5               	bsf	4053,2,c	;volatile
   472                           
   473                           ;4-7seg.c: 75: ((void)(TMR0H=((65536-788)>>8),TMR0L=((65536-788)&0xFF)));
   474  000868  0EFC               	movlw	252
   475  00086A  6ED7               	movwf	4055,c	;volatile
   476  00086C  0EEC               	movlw	236
   477  00086E  6ED6               	movwf	4054,c	;volatile
   478                           
   479                           ;4-7seg.c: 76: T0CONbits.TMR0ON = 1;
   480  000870  8ED5               	bsf	4053,7,c	;volatile
   481                           
   482                           ;4-7seg.c: 77: INTCONbits.TMR0IF = 0;
   483  000872  94F2               	bcf	intcon,2,c	;volatile
   484                           
   485                           ;4-7seg.c: 78: INTCONbits.TMR0IE = 1;
   486  000874  8AF2               	bsf	intcon,5,c	;volatile
   487                           
   488                           ;4-7seg.c: 79: INTCONbits.PEIE = 1;
   489  000876  8CF2               	bsf	intcon,6,c	;volatile
   490                           
   491                           ;4-7seg.c: 80: INTCONbits.GIE = 1;
   492  000878  8EF2               	bsf	intcon,7,c	;volatile
   493                           
   494                           ;4-7seg.c: 83: ADCON1=0x0A;
   495  00087A  0E0A               	movlw	10
   496  00087C  6EC1               	movwf	4033,c	;volatile
   497                           
   498                           ;4-7seg.c: 84: TRISB0= 0;
   499  00087E  9093               	bcf	3987,0,c	;volatile
   500                           
   501                           ;4-7seg.c: 85: TRISB1= 0;
   502  000880  9293               	bcf	3987,1,c	;volatile
   503                           
   504                           ;4-7seg.c: 86: TRISB2= 0;
   505  000882  9493               	bcf	3987,2,c	;volatile
   506                           
   507                           ;4-7seg.c: 87: TRISB3= 0;
   508  000884  9693               	bcf	3987,3,c	;volatile
   509                           
   510                           ;4-7seg.c: 88: TRISB4= 1;
   511  000886  8893               	bsf	3987,4,c	;volatile
   512                           
   513                           ;4-7seg.c: 89: TRISB5= 1;
   514  000888  8A93               	bsf	3987,5,c	;volatile
   515                           
   516                           ;4-7seg.c: 90: TRISB6= 1;
   517  00088A  8C93               	bsf	3987,6,c	;volatile
   518                           
   519                           ;4-7seg.c: 91: TRISB7= 1;
   520  00088C  8E93               	bsf	3987,7,c	;volatile
   521                           
   522                           ;4-7seg.c: 92: TRISC6= 0;
   523  00088E  9C94               	bcf	3988,6,c	;volatile
   524                           
   525                           ;4-7seg.c: 93: TRISC7=0;
   526  000890  9E94               	bcf	3988,7,c	;volatile
   527                           
   528                           ;4-7seg.c: 94: TRISD = 0;
   529  000892  0E00               	movlw	0
   530  000894  6E95               	movwf	3989,c	;volatile
   531                           
   532                           ;4-7seg.c: 95: TRISE0= 1;
   533  000896  8096               	bsf	3990,0,c	;volatile
   534                           
   535                           ;4-7seg.c: 96: TRISE1= 1;
   536  000898  8296               	bsf	3990,1,c	;volatile
   537                           
   538                           ;4-7seg.c: 97: TRISE2= 1;
   539  00089A  8496               	bsf	3990,2,c	;volatile
   540                           
   541                           ;4-7seg.c: 98: TRISAbits.TRISA1= 1;
   542  00089C  8292               	bsf	3986,1,c	;volatile
   543  00089E                     l113:
   544                           
   545                           ;4-7seg.c: 101: {
   546                           ;4-7seg.c: 103: if (Timer10m)
   547  00089E  502B               	movf	_Timer10m,w,c
   548  0008A0  B4D8               	btfsc	status,2,c
   549  0008A2  D07D               	goto	l1355
   550                           
   551                           ;4-7seg.c: 104: {
   552                           ;4-7seg.c: 105: Timer10m = 0;
   553  0008A4  0E00               	movlw	0
   554  0008A6  6E2B               	movwf	_Timer10m,c
   555                           
   556                           ;4-7seg.c: 106: LATD = 0xff;
   557  0008A8  688C               	setf	3980,c	;volatile
   558                           
   559                           ;4-7seg.c: 107: LATB = OutPortB | 0x0f;
   560  0008AA  5029               	movf	_OutPortB,w,c
   561  0008AC  090F               	iorlw	15
   562  0008AE  6E8A               	movwf	3978,c	;volatile
   563                           
   564                           ;4-7seg.c: 108: keypress=0;
   565  0008B0  0E00               	movlw	0
   566  0008B2  6E18               	movwf	_keypress+1,c
   567  0008B4  0E00               	movlw	0
   568  0008B6  6E17               	movwf	_keypress,c
   569                           
   570                           ;4-7seg.c: 109: for(col=0;col<4;col++)
   571  0008B8  0E00               	movlw	0
   572  0008BA  6E0A               	movwf	_col+1,c
   573  0008BC  0E00               	movlw	0
   574  0008BE  6E09               	movwf	_col,c
   575  0008C0                     l1317:
   576  0008C0  500A               	movf	_col+1,w,c
   577  0008C2  E165               	bnz	l1351
   578  0008C4  0E04               	movlw	4
   579  0008C6  5C09               	subwf	_col,w,c
   580  0008C8  B0D8               	btfsc	status,0,c
   581  0008CA  D061               	goto	l1351
   582                           
   583                           ;4-7seg.c: 110: {
   584                           ;4-7seg.c: 111: LATB= ~ScanLine[col];
   585  0008CC  0E4C               	movlw	low _ScanLine
   586  0008CE  2409               	addwf	_col,w,c
   587  0008D0  6ED9               	movwf	fsr2l,c
   588  0008D2  0E00               	movlw	high _ScanLine
   589  0008D4  200A               	addwfc	_col+1,w,c
   590  0008D6  6EDA               	movwf	fsr2h,c
   591  0008D8  50DF               	movf	indf2,w,c
   592  0008DA  0AFF               	xorlw	255
   593  0008DC  6E8A               	movwf	3978,c	;volatile
   594                           
   595                           ;4-7seg.c: 112: LATB= ~ScanLine[col];
   596  0008DE  0E4C               	movlw	low _ScanLine
   597  0008E0  2409               	addwf	_col,w,c
   598  0008E2  6ED9               	movwf	fsr2l,c
   599  0008E4  0E00               	movlw	high _ScanLine
   600  0008E6  200A               	addwfc	_col+1,w,c
   601  0008E8  6EDA               	movwf	fsr2h,c
   602  0008EA  50DF               	movf	indf2,w,c
   603  0008EC  0AFF               	xorlw	255
   604  0008EE  6E8A               	movwf	3978,c	;volatile
   605                           
   606                           ;4-7seg.c: 113: rowkey= (~PORTB) & 0xf0;
   607  0008F0  5081               	movf	3969,w,c	;volatile
   608  0008F2  0AFF               	xorlw	255
   609  0008F4  6E4A               	movwf	??_main& (0+255),c
   610  0008F6  0EF0               	movlw	240
   611  0008F8  164A               	andwf	??_main,f,c
   612  0008FA  504A               	movf	??_main,w,c
   613  0008FC  6E21               	movwf	_rowkey,c
   614  0008FE  6A22               	clrf	_rowkey+1,c
   615                           
   616                           ;4-7seg.c: 114: if(rowkey !=0)
   617  000900  5021               	movf	_rowkey,w,c
   618  000902  1022               	iorwf	_rowkey+1,w,c
   619  000904  B4D8               	btfsc	status,2,c
   620  000906  D040               	goto	l1347
   621                           
   622                           ;4-7seg.c: 115: {
   623                           ;4-7seg.c: 116: if (rowkey==0x10) row=0;
   624  000908  0E10               	movlw	16
   625  00090A  1821               	xorwf	_rowkey,w,c
   626  00090C  1022               	iorwf	_rowkey+1,w,c
   627  00090E  A4D8               	btfss	status,2,c
   628  000910  D004               	goto	l1331
   629  000912  0E00               	movlw	0
   630  000914  6E20               	movwf	_row+1,c
   631  000916  0E00               	movlw	0
   632  000918  6E1F               	movwf	_row,c
   633  00091A                     l1331:
   634                           
   635                           ;4-7seg.c: 117: if (rowkey==0x20) row=1;
   636  00091A  0E20               	movlw	32
   637  00091C  1821               	xorwf	_rowkey,w,c
   638  00091E  1022               	iorwf	_rowkey+1,w,c
   639  000920  A4D8               	btfss	status,2,c
   640  000922  D004               	goto	l1335
   641  000924  0E00               	movlw	0
   642  000926  6E20               	movwf	_row+1,c
   643  000928  0E01               	movlw	1
   644  00092A  6E1F               	movwf	_row,c
   645  00092C                     l1335:
   646                           
   647                           ;4-7seg.c: 118: if (rowkey==0x40) row=2;
   648  00092C  0E40               	movlw	64
   649  00092E  1821               	xorwf	_rowkey,w,c
   650  000930  1022               	iorwf	_rowkey+1,w,c
   651  000932  A4D8               	btfss	status,2,c
   652  000934  D004               	goto	l1339
   653  000936  0E00               	movlw	0
   654  000938  6E20               	movwf	_row+1,c
   655  00093A  0E02               	movlw	2
   656  00093C  6E1F               	movwf	_row,c
   657  00093E                     l1339:
   658                           
   659                           ;4-7seg.c: 119: if (rowkey==0x80) row=3;
   660  00093E  0E80               	movlw	128
   661  000940  1821               	xorwf	_rowkey,w,c
   662  000942  1022               	iorwf	_rowkey+1,w,c
   663  000944  A4D8               	btfss	status,2,c
   664  000946  D004               	goto	l1343
   665  000948  0E00               	movlw	0
   666  00094A  6E20               	movwf	_row+1,c
   667  00094C  0E03               	movlw	3
   668  00094E  6E1F               	movwf	_row,c
   669  000950                     l1343:
   670                           
   671                           ;4-7seg.c: 120: inval= KeyMap[row + col *4];
   672  000950  C009  F04A         	movff	_col,??_main
   673  000954  C00A  F04B         	movff	_col+1,??_main+1
   674  000958  90D8               	bcf	status,0,c
   675  00095A  364A               	rlcf	??_main,f,c
   676  00095C  364B               	rlcf	??_main+1,f,c
   677  00095E  90D8               	bcf	status,0,c
   678  000960  364A               	rlcf	??_main,f,c
   679  000962  364B               	rlcf	??_main+1,f,c
   680  000964  501F               	movf	_row,w,c
   681  000966  264A               	addwf	??_main,f,c
   682  000968  5020               	movf	_row+1,w,c
   683  00096A  224B               	addwfc	??_main+1,f,c
   684  00096C  0E45               	movlw	low _KeyMap
   685  00096E  244A               	addwf	??_main,w,c
   686  000970  6EF6               	movwf	tblptrl,c
   687  000972  0E08               	movlw	high _KeyMap
   688  000974  204B               	addwfc	??_main+1,w,c
   689  000976  6EF7               	movwf	tblptrh,c
   690  000978                     	if	0	;There are less than 3 active tblptr bytes
   691  000978                     	endif
   692  000978  0008               	tblrd		*
   693  00097A  50F5               	movf	tablat,w,c
   694  00097C  6E13               	movwf	_inval,c
   695  00097E  6A14               	clrf	_inval+1,c
   696                           
   697                           ;4-7seg.c: 121: keypress=1;
   698  000980  0E00               	movlw	0
   699  000982  6E18               	movwf	_keypress+1,c
   700  000984  0E01               	movlw	1
   701  000986  6E17               	movwf	_keypress,c
   702  000988                     l1347:
   703  000988  4A09               	infsnz	_col,f,c
   704  00098A  2A0A               	incf	_col+1,f,c
   705  00098C  D799               	goto	l1317
   706  00098E                     l1351:
   707                           
   708                           ;4-7seg.c: 122: }
   709                           ;4-7seg.c: 123: }
   710                           ;4-7seg.c: 124: if (keypress==0) inval=17;
   711  00098E  5017               	movf	_keypress,w,c
   712  000990  1018               	iorwf	_keypress+1,w,c
   713  000992  A4D8               	btfss	status,2,c
   714  000994  D004               	goto	l1355
   715  000996  0E00               	movlw	0
   716  000998  6E14               	movwf	_inval+1,c
   717  00099A  0E11               	movlw	17
   718  00099C  6E13               	movwf	_inval,c
   719  00099E                     l1355:
   720                           
   721                           ;4-7seg.c: 125: }
   722                           ;4-7seg.c: 128: a = PORTE & 0x07;
   723  00099E  CF84 F04A          	movff	3972,??_main	;volatile
   724  0009A2  0E07               	movlw	7
   725  0009A4  164A               	andwf	??_main,f,c
   726  0009A6  504A               	movf	??_main,w,c
   727  0009A8  6E07               	movwf	_a,c
   728  0009AA  6A08               	clrf	_a+1,c
   729                           
   730                           ;4-7seg.c: 129: switch(a)
   731  0009AC  D292               	goto	l1471
   732  0009AE                     l1359:
   733                           
   734                           ;4-7seg.c: 141: if (rrr){
   735  0009AE  5023               	movf	_rrr,w,c
   736  0009B0  1024               	iorwf	_rrr+1,w,c
   737  0009B2  B4D8               	btfsc	status,2,c
   738  0009B4  D016               	goto	l1367
   739                           
   740                           ;4-7seg.c: 142: rrr=0;
   741  0009B6  0E00               	movlw	0
   742  0009B8  6E24               	movwf	_rrr+1,c
   743  0009BA  0E00               	movlw	0
   744  0009BC  6E23               	movwf	_rrr,c
   745                           
   746                           ;4-7seg.c: 143: if(ggg++>9999)ggg=0;
   747  0009BE  500D               	movf	_ggg,w,c
   748  0009C0  6E4A               	movwf	??_main& (0+255),c
   749  0009C2  500E               	movf	_ggg+1,w,c
   750  0009C4  6E4B               	movwf	(??_main+1)& (0+255),c
   751  0009C6  4A0D               	infsnz	_ggg,f,c
   752  0009C8  2A0E               	incf	_ggg+1,f,c
   753  0009CA  BE4B               	btfsc	??_main+1,7,c
   754  0009CC  D00A               	goto	l1367
   755  0009CE  0E10               	movlw	16
   756  0009D0  5C4A               	subwf	??_main,w,c
   757  0009D2  0E27               	movlw	39
   758  0009D4  584B               	subwfb	??_main+1,w,c
   759  0009D6  A0D8               	btfss	status,0,c
   760  0009D8  D004               	goto	l1367
   761  0009DA  0E00               	movlw	0
   762  0009DC  6E0E               	movwf	_ggg+1,c
   763  0009DE  0E00               	movlw	0
   764  0009E0  6E0D               	movwf	_ggg,c
   765  0009E2                     l1367:
   766                           
   767                           ;4-7seg.c: 144: }
   768                           ;4-7seg.c: 145: disp[0]=LED[ggg%10];
   769  0009E2  C00D  F044         	movff	_ggg,___awmod@dividend
   770  0009E6  C00E  F045         	movff	_ggg+1,___awmod@dividend+1
   771  0009EA  0E00               	movlw	0
   772  0009EC  6E47               	movwf	___awmod@divisor+1,c
   773  0009EE  0E0A               	movlw	10
   774  0009F0  6E46               	movwf	___awmod@divisor,c
   775  0009F2  EC6B  F008         	call	___awmod	;wreg free
   776  0009F6  0E31               	movlw	low _LED
   777  0009F8  2444               	addwf	?___awmod,w,c
   778  0009FA  6EF6               	movwf	tblptrl,c
   779  0009FC  0E08               	movlw	high _LED
   780  0009FE  2045               	addwfc	?___awmod+1,w,c
   781  000A00  6EF7               	movwf	tblptrh,c
   782  000A02                     	if	0	;There are less than 3 active tblptr bytes
   783  000A02                     	endif
   784  000A02  0008               	tblrd		*
   785  000A04  CFF5 F001          	movff	tablat,_disp
   786                           
   787                           ;4-7seg.c: 146: disp[1]=LED[ggg/10%10];
   788  000A08  0E00               	movlw	0
   789  000A0A  6E3F               	movwf	___awdiv@divisor+1,c
   790  000A0C  0E0A               	movlw	10
   791  000A0E  6E3E               	movwf	___awdiv@divisor,c
   792  000A10  C00D  F03C         	movff	_ggg,___awdiv@dividend
   793  000A14  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   794  000A18  ECE8  F007         	call	___awdiv	;wreg free
   795  000A1C  C03C  F044         	movff	?___awdiv,___awmod@dividend
   796  000A20  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   797  000A24  0E00               	movlw	0
   798  000A26  6E47               	movwf	___awmod@divisor+1,c
   799  000A28  0E0A               	movlw	10
   800  000A2A  6E46               	movwf	___awmod@divisor,c
   801  000A2C  EC6B  F008         	call	___awmod	;wreg free
   802  000A30  0E31               	movlw	low _LED
   803  000A32  2444               	addwf	?___awmod,w,c
   804  000A34  6EF6               	movwf	tblptrl,c
   805  000A36  0E08               	movlw	high _LED
   806  000A38  2045               	addwfc	?___awmod+1,w,c
   807  000A3A  6EF7               	movwf	tblptrh,c
   808  000A3C                     	if	0	;There are less than 3 active tblptr bytes
   809  000A3C                     	endif
   810  000A3C  0008               	tblrd		*
   811  000A3E  CFF5 F002          	movff	tablat,_disp+1
   812                           
   813                           ;4-7seg.c: 147: disp[2]=LED[ggg/100%10];
   814  000A42  0E00               	movlw	0
   815  000A44  6E3F               	movwf	___awdiv@divisor+1,c
   816  000A46  0E64               	movlw	100
   817  000A48  6E3E               	movwf	___awdiv@divisor,c
   818  000A4A  C00D  F03C         	movff	_ggg,___awdiv@dividend
   819  000A4E  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   820  000A52  ECE8  F007         	call	___awdiv	;wreg free
   821  000A56  C03C  F044         	movff	?___awdiv,___awmod@dividend
   822  000A5A  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   823  000A5E  0E00               	movlw	0
   824  000A60  6E47               	movwf	___awmod@divisor+1,c
   825  000A62  0E0A               	movlw	10
   826  000A64  6E46               	movwf	___awmod@divisor,c
   827  000A66  EC6B  F008         	call	___awmod	;wreg free
   828  000A6A  0E31               	movlw	low _LED
   829  000A6C  2444               	addwf	?___awmod,w,c
   830  000A6E  6EF6               	movwf	tblptrl,c
   831  000A70  0E08               	movlw	high _LED
   832  000A72  2045               	addwfc	?___awmod+1,w,c
   833  000A74  6EF7               	movwf	tblptrh,c
   834  000A76                     	if	0	;There are less than 3 active tblptr bytes
   835  000A76                     	endif
   836  000A76  0008               	tblrd		*
   837  000A78  CFF5 F003          	movff	tablat,_disp+2
   838                           
   839                           ;4-7seg.c: 148: disp[3]=LED[ggg/1000%10];
   840  000A7C  0E03               	movlw	3
   841  000A7E  6E3F               	movwf	___awdiv@divisor+1,c
   842  000A80  0EE8               	movlw	232
   843  000A82  6E3E               	movwf	___awdiv@divisor,c
   844  000A84  C00D  F03C         	movff	_ggg,___awdiv@dividend
   845  000A88  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   846  000A8C  ECE8  F007         	call	___awdiv	;wreg free
   847  000A90  C03C  F044         	movff	?___awdiv,___awmod@dividend
   848  000A94  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   849  000A98  0E00               	movlw	0
   850  000A9A  6E47               	movwf	___awmod@divisor+1,c
   851  000A9C  0E0A               	movlw	10
   852  000A9E  6E46               	movwf	___awmod@divisor,c
   853  000AA0  EC6B  F008         	call	___awmod	;wreg free
   854  000AA4  D07B               	goto	L3
   855  000AA6                     L2:
   856  000AA6                     	endif
   857  000AA6  0008               	tblrd		*
   858  000AA8  CFF5 F004          	movff	tablat,_disp+3
   859                           
   860                           ;4-7seg.c: 149: break;
   861  000AAC  D233               	goto	l1473
   862  000AAE                     l1375:
   863                           
   864                           ;4-7seg.c: 153: if (rrr){
   865  000AAE  5023               	movf	_rrr,w,c
   866  000AB0  1024               	iorwf	_rrr+1,w,c
   867  000AB2  B4D8               	btfsc	status,2,c
   868  000AB4  D012               	goto	l1383
   869                           
   870                           ;4-7seg.c: 154: rrr=0;
   871  000AB6  0E00               	movlw	0
   872  000AB8  6E24               	movwf	_rrr+1,c
   873  000ABA  0E00               	movlw	0
   874  000ABC  6E23               	movwf	_rrr,c
   875                           
   876                           ;4-7seg.c: 155: if(ggg--<0)ggg=9999;
   877  000ABE  500D               	movf	_ggg,w,c
   878  000AC0  6E4A               	movwf	??_main& (0+255),c
   879  000AC2  500E               	movf	_ggg+1,w,c
   880  000AC4  6E4B               	movwf	(??_main+1)& (0+255),c
   881  000AC6  0E01               	movlw	1
   882  000AC8  5E0D               	subwf	_ggg,f,c
   883  000ACA  0E00               	movlw	0
   884  000ACC  5A0E               	subwfb	_ggg+1,f,c
   885  000ACE  AE4B               	btfss	??_main+1,7,c
   886  000AD0  D004               	goto	l1383
   887  000AD2  0E27               	movlw	39
   888  000AD4  6E0E               	movwf	_ggg+1,c
   889  000AD6  0E0F               	movlw	15
   890  000AD8  6E0D               	movwf	_ggg,c
   891  000ADA                     l1383:
   892                           
   893                           ;4-7seg.c: 156: }
   894                           ;4-7seg.c: 157: disp[0]=LED[ggg%10];
   895  000ADA  C00D  F044         	movff	_ggg,___awmod@dividend
   896  000ADE  C00E  F045         	movff	_ggg+1,___awmod@dividend+1
   897  000AE2  0E00               	movlw	0
   898  000AE4  6E47               	movwf	___awmod@divisor+1,c
   899  000AE6  0E0A               	movlw	10
   900  000AE8  6E46               	movwf	___awmod@divisor,c
   901  000AEA  EC6B  F008         	call	___awmod	;wreg free
   902  000AEE  0E31               	movlw	low _LED
   903  000AF0  2444               	addwf	?___awmod,w,c
   904  000AF2  6EF6               	movwf	tblptrl,c
   905  000AF4  0E08               	movlw	high _LED
   906  000AF6  2045               	addwfc	?___awmod+1,w,c
   907  000AF8  6EF7               	movwf	tblptrh,c
   908  000AFA                     	if	0	;There are less than 3 active tblptr bytes
   909  000AFA                     	endif
   910  000AFA  0008               	tblrd		*
   911  000AFC  CFF5 F001          	movff	tablat,_disp
   912                           
   913                           ;4-7seg.c: 158: disp[1]=LED[ggg/10%10];
   914  000B00  0E00               	movlw	0
   915  000B02  6E3F               	movwf	___awdiv@divisor+1,c
   916  000B04  0E0A               	movlw	10
   917  000B06  6E3E               	movwf	___awdiv@divisor,c
   918  000B08  C00D  F03C         	movff	_ggg,___awdiv@dividend
   919  000B0C  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   920  000B10  ECE8  F007         	call	___awdiv	;wreg free
   921  000B14  C03C  F044         	movff	?___awdiv,___awmod@dividend
   922  000B18  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   923  000B1C  0E00               	movlw	0
   924  000B1E  6E47               	movwf	___awmod@divisor+1,c
   925  000B20  0E0A               	movlw	10
   926  000B22  6E46               	movwf	___awmod@divisor,c
   927  000B24  EC6B  F008         	call	___awmod	;wreg free
   928  000B28  0E31               	movlw	low _LED
   929  000B2A  2444               	addwf	?___awmod,w,c
   930  000B2C  6EF6               	movwf	tblptrl,c
   931  000B2E  0E08               	movlw	high _LED
   932  000B30  2045               	addwfc	?___awmod+1,w,c
   933  000B32  6EF7               	movwf	tblptrh,c
   934  000B34                     	if	0	;There are less than 3 active tblptr bytes
   935  000B34                     	endif
   936  000B34  0008               	tblrd		*
   937  000B36  CFF5 F002          	movff	tablat,_disp+1
   938                           
   939                           ;4-7seg.c: 159: disp[2]=LED[ggg/100%10];
   940  000B3A  0E00               	movlw	0
   941  000B3C  6E3F               	movwf	___awdiv@divisor+1,c
   942  000B3E  0E64               	movlw	100
   943  000B40  6E3E               	movwf	___awdiv@divisor,c
   944  000B42  C00D  F03C         	movff	_ggg,___awdiv@dividend
   945  000B46  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   946  000B4A  ECE8  F007         	call	___awdiv	;wreg free
   947  000B4E  C03C  F044         	movff	?___awdiv,___awmod@dividend
   948  000B52  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   949  000B56  0E00               	movlw	0
   950  000B58  6E47               	movwf	___awmod@divisor+1,c
   951  000B5A  0E0A               	movlw	10
   952  000B5C  6E46               	movwf	___awmod@divisor,c
   953  000B5E  EC6B  F008         	call	___awmod	;wreg free
   954  000B62  0E31               	movlw	low _LED
   955  000B64  2444               	addwf	?___awmod,w,c
   956  000B66  6EF6               	movwf	tblptrl,c
   957  000B68  0E08               	movlw	high _LED
   958  000B6A  2045               	addwfc	?___awmod+1,w,c
   959  000B6C  6EF7               	movwf	tblptrh,c
   960  000B6E                     	if	0	;There are less than 3 active tblptr bytes
   961  000B6E                     	endif
   962  000B6E  0008               	tblrd		*
   963  000B70  CFF5 F003          	movff	tablat,_disp+2
   964                           
   965                           ;4-7seg.c: 160: disp[3]=LED[ggg/1000%10];
   966  000B74  0E03               	movlw	3
   967  000B76  6E3F               	movwf	___awdiv@divisor+1,c
   968  000B78  0EE8               	movlw	232
   969  000B7A  6E3E               	movwf	___awdiv@divisor,c
   970  000B7C  C00D  F03C         	movff	_ggg,___awdiv@dividend
   971  000B80  C00E  F03D         	movff	_ggg+1,___awdiv@dividend+1
   972  000B84  ECE8  F007         	call	___awdiv	;wreg free
   973  000B88  C03C  F044         	movff	?___awdiv,___awmod@dividend
   974  000B8C  C03D  F045         	movff	?___awdiv+1,___awmod@dividend+1
   975  000B90  0E00               	movlw	0
   976  000B92  6E47               	movwf	___awmod@divisor+1,c
   977  000B94  0E0A               	movlw	10
   978  000B96  6E46               	movwf	___awmod@divisor,c
   979  000B98  EC6B  F008         	call	___awmod	;wreg free
   980  000B9C                     L3:
   981  000B9C  0E31               	movlw	low _LED
   982  000B9E  2444               	addwf	?___awmod,w,c
   983  000BA0  6EF6               	movwf	tblptrl,c
   984  000BA2  0E08               	movlw	high _LED
   985  000BA4  2045               	addwfc	?___awmod+1,w,c
   986  000BA6  D090               	goto	L6
   987  000BA8                     l1391:
   988                           
   989                           ;4-7seg.c: 165: if (Timer500m){
   990  000BA8  502C               	movf	_Timer500m,w,c
   991  000BAA  B4D8               	btfsc	status,2,c
   992  000BAC  D022               	goto	l1403
   993                           
   994                           ;4-7seg.c: 166: Timer500m=0;
   995  000BAE  0E00               	movlw	0
   996  000BB0  6E2C               	movwf	_Timer500m,c
   997                           
   998                           ;4-7seg.c: 167: if(sec++>58)
   999  000BB2  5025               	movf	_sec,w,c
  1000  000BB4  6E4A               	movwf	??_main& (0+255),c
  1001  000BB6  5026               	movf	_sec+1,w,c
  1002  000BB8  6E4B               	movwf	(??_main+1)& (0+255),c
  1003  000BBA  4A25               	infsnz	_sec,f,c
  1004  000BBC  2A26               	incf	_sec+1,f,c
  1005  000BBE  504B               	movf	??_main+1,w,c
  1006  000BC0  E104               	bnz	u830
  1007  000BC2  0E3B               	movlw	59
  1008  000BC4  5C4A               	subwf	??_main,w,c
  1009  000BC6  A0D8               	btfss	status,0,c
  1010  000BC8  D014               	goto	l1403
  1011  000BCA                     u830:
  1012                           
  1013                           ;4-7seg.c: 168: {
  1014                           ;4-7seg.c: 169: sec=0;
  1015  000BCA  0E00               	movlw	0
  1016  000BCC  6E26               	movwf	_sec+1,c
  1017  000BCE  0E00               	movlw	0
  1018  000BD0  6E25               	movwf	_sec,c
  1019                           
  1020                           ;4-7seg.c: 170: if(min++>58)
  1021  000BD2  5019               	movf	_min,w,c
  1022  000BD4  6E4A               	movwf	??_main& (0+255),c
  1023  000BD6  501A               	movf	_min+1,w,c
  1024  000BD8  6E4B               	movwf	(??_main+1)& (0+255),c
  1025  000BDA  4A19               	infsnz	_min,f,c
  1026  000BDC  2A1A               	incf	_min+1,f,c
  1027  000BDE  504B               	movf	??_main+1,w,c
  1028  000BE0  E104               	bnz	u840
  1029  000BE2  0E3B               	movlw	59
  1030  000BE4  5C4A               	subwf	??_main,w,c
  1031  000BE6  A0D8               	btfss	status,0,c
  1032  000BE8  D004               	goto	l1403
  1033  000BEA                     u840:
  1034                           
  1035                           ;4-7seg.c: 171: {
  1036                           ;4-7seg.c: 172: min=0;
  1037  000BEA  0E00               	movlw	0
  1038  000BEC  6E1A               	movwf	_min+1,c
  1039  000BEE  0E00               	movlw	0
  1040  000BF0  6E19               	movwf	_min,c
  1041  000BF2                     l1403:
  1042                           
  1043                           ;4-7seg.c: 173: }
  1044                           ;4-7seg.c: 174: }
  1045                           ;4-7seg.c: 175: }
  1046                           ;4-7seg.c: 176: disp[0]=LED[sec%10];
  1047  000BF2  C025  F043         	movff	_sec,___lwmod@dividend
  1048  000BF6  C026  F044         	movff	_sec+1,___lwmod@dividend+1
  1049  000BFA  0E00               	movlw	0
  1050  000BFC  6E46               	movwf	___lwmod@divisor+1,c
  1051  000BFE  0E0A               	movlw	10
  1052  000C00  6E45               	movwf	___lwmod@divisor,c
  1053  000C02  ECCC  F008         	call	___lwmod	;wreg free
  1054  000C06  0E31               	movlw	low _LED
  1055  000C08  2443               	addwf	?___lwmod,w,c
  1056  000C0A  6EF6               	movwf	tblptrl,c
  1057  000C0C  0E08               	movlw	high _LED
  1058  000C0E  2044               	addwfc	?___lwmod+1,w,c
  1059  000C10  6EF7               	movwf	tblptrh,c
  1060  000C12                     	if	0	;There are less than 3 active tblptr bytes
  1061  000C12                     	endif
  1062  000C12  0008               	tblrd		*
  1063  000C14  CFF5 F001          	movff	tablat,_disp
  1064                           
  1065                           ;4-7seg.c: 177: disp[1]=LED[sec/10%10];
  1066  000C18  0E00               	movlw	0
  1067  000C1A  6E3F               	movwf	___lwdiv@divisor+1,c
  1068  000C1C  0E0A               	movlw	10
  1069  000C1E  6E3E               	movwf	___lwdiv@divisor,c
  1070  000C20  C025  F03C         	movff	_sec,___lwdiv@dividend
  1071  000C24  C026  F03D         	movff	_sec+1,___lwdiv@dividend+1
  1072  000C28  ECA3  F008         	call	___lwdiv	;wreg free
  1073  000C2C  C03C  F043         	movff	?___lwdiv,___lwmod@dividend
  1074  000C30  C03D  F044         	movff	?___lwdiv+1,___lwmod@dividend+1
  1075  000C34  0E00               	movlw	0
  1076  000C36  6E46               	movwf	___lwmod@divisor+1,c
  1077  000C38  0E0A               	movlw	10
  1078  000C3A  6E45               	movwf	___lwmod@divisor,c
  1079  000C3C  ECCC  F008         	call	___lwmod	;wreg free
  1080  000C40  0E31               	movlw	low _LED
  1081  000C42  2443               	addwf	?___lwmod,w,c
  1082  000C44  6EF6               	movwf	tblptrl,c
  1083  000C46  0E08               	movlw	high _LED
  1084  000C48  2044               	addwfc	?___lwmod+1,w,c
  1085  000C4A  6EF7               	movwf	tblptrh,c
  1086  000C4C                     	if	0	;There are less than 3 active tblptr bytes
  1087  000C4C                     	endif
  1088  000C4C  0008               	tblrd		*
  1089  000C4E  CFF5 F002          	movff	tablat,_disp+1
  1090                           
  1091                           ;4-7seg.c: 178: if(Timer250m)
  1092  000C52  5005               	movf	_Timer250m,w,c
  1093  000C54  1006               	iorwf	_Timer250m+1,w,c
  1094  000C56  B4D8               	btfsc	status,2,c
  1095  000C58  D00F               	goto	l1411
  1096                           
  1097                           ;4-7seg.c: 179: {
  1098                           ;4-7seg.c: 180: disp[2]=LED[(min%10)+10];
  1099  000C5A  C019  F043         	movff	_min,___lwmod@dividend
  1100  000C5E  C01A  F044         	movff	_min+1,___lwmod@dividend+1
  1101  000C62  0E00               	movlw	0
  1102  000C64  6E46               	movwf	___lwmod@divisor+1,c
  1103  000C66  0E0A               	movlw	10
  1104  000C68  6E45               	movwf	___lwmod@divisor,c
  1105  000C6A  ECCC  F008         	call	___lwmod	;wreg free
  1106  000C6E  0E0A               	movlw	10
  1107  000C70  2643               	addwf	?___lwmod,f,c
  1108  000C72  0E00               	movlw	0
  1109  000C74  2244               	addwfc	?___lwmod+1,f,c
  1110  000C76  D00A               	goto	L4
  1111  000C78                     l1411:
  1112                           
  1113                           ;4-7seg.c: 182: else
  1114                           ;4-7seg.c: 183: {
  1115                           ;4-7seg.c: 184: disp[2]=LED[min%10];
  1116  000C78  C019  F043         	movff	_min,___lwmod@dividend
  1117  000C7C  C01A  F044         	movff	_min+1,___lwmod@dividend+1
  1118  000C80  0E00               	movlw	0
  1119  000C82  6E46               	movwf	___lwmod@divisor+1,c
  1120  000C84  0E0A               	movlw	10
  1121  000C86  6E45               	movwf	___lwmod@divisor,c
  1122  000C88  ECCC  F008         	call	___lwmod	;wreg free
  1123  000C8C                     L4:
  1124  000C8C  0E31               	movlw	low _LED
  1125  000C8E  2443               	addwf	?___lwmod,w,c
  1126  000C90  6EF6               	movwf	tblptrl,c
  1127  000C92  0E08               	movlw	high _LED
  1128  000C94  2044               	addwfc	?___lwmod+1,w,c
  1129  000C96  6EF7               	movwf	tblptrh,c
  1130  000C98                     	if	0	;There are less than 3 active tblptr bytes
  1131  000C98                     	endif
  1132  000C98  0008               	tblrd		*
  1133  000C9A  CFF5 F003          	movff	tablat,_disp+2
  1134                           
  1135                           ;4-7seg.c: 185: }
  1136                           ;4-7seg.c: 186: disp[3]=LED[min/10%10];
  1137  000C9E  0E00               	movlw	0
  1138  000CA0  6E3F               	movwf	___lwdiv@divisor+1,c
  1139  000CA2  0E0A               	movlw	10
  1140  000CA4  6E3E               	movwf	___lwdiv@divisor,c
  1141  000CA6  C019  F03C         	movff	_min,___lwdiv@dividend
  1142  000CAA  C01A  F03D         	movff	_min+1,___lwdiv@dividend+1
  1143  000CAE  ECA3  F008         	call	___lwdiv	;wreg free
  1144  000CB2  C03C  F043         	movff	?___lwdiv,___lwmod@dividend
  1145  000CB6  C03D  F044         	movff	?___lwdiv+1,___lwmod@dividend+1
  1146  000CBA  0E00               	movlw	0
  1147  000CBC  6E46               	movwf	___lwmod@divisor+1,c
  1148  000CBE  0E0A               	movlw	10
  1149  000CC0  6E45               	movwf	___lwmod@divisor,c
  1150  000CC2  ECCC  F008         	call	___lwmod	;wreg free
  1151  000CC6  D087               	goto	L7
  1152  000CC8                     L6:
  1153  000CC8  6EF7               	movwf	tblptrh,c
  1154  000CCA                     	if	0	;There are less than 3 active tblptr bytes
  1155  000CCA  D6ED               	goto	L2
  1156  000CCC                     l1413:
  1157                           
  1158                           ;4-7seg.c: 191: if (Timer500m){
  1159  000CCC  502C               	movf	_Timer500m,w,c
  1160  000CCE  B4D8               	btfsc	status,2,c
  1161  000CD0  D01A               	goto	l1425
  1162                           
  1163                           ;4-7seg.c: 192: Timer500m=0;
  1164  000CD2  0E00               	movlw	0
  1165  000CD4  6E2C               	movwf	_Timer500m,c
  1166                           
  1167                           ;4-7seg.c: 193: if(sec--<1)
  1168  000CD6  0625               	decf	_sec,f,c
  1169  000CD8  A0D8               	btfss	status,0,c
  1170  000CDA  0626               	decf	_sec+1,f,c
  1171  000CDC  2825               	incf	_sec,w,c
  1172  000CDE  E113               	bnz	l1425
  1173  000CE0  2826               	incf	_sec+1,w,c
  1174  000CE2  A4D8               	btfss	status,2,c
  1175  000CE4  D010               	goto	l1425
  1176                           
  1177                           ;4-7seg.c: 194: {
  1178                           ;4-7seg.c: 195: sec=59;
  1179  000CE6  0E00               	movlw	0
  1180  000CE8  6E26               	movwf	_sec+1,c
  1181  000CEA  0E3B               	movlw	59
  1182  000CEC  6E25               	movwf	_sec,c
  1183                           
  1184                           ;4-7seg.c: 196: if(min--<1)
  1185  000CEE  0619               	decf	_min,f,c
  1186  000CF0  A0D8               	btfss	status,0,c
  1187  000CF2  061A               	decf	_min+1,f,c
  1188  000CF4  2819               	incf	_min,w,c
  1189  000CF6  E107               	bnz	l1425
  1190  000CF8  281A               	incf	_min+1,w,c
  1191  000CFA  A4D8               	btfss	status,2,c
  1192  000CFC  D004               	goto	l1425
  1193                           
  1194                           ;4-7seg.c: 197: {
  1195                           ;4-7seg.c: 198: min=59;
  1196  000CFE  0E00               	movlw	0
  1197  000D00  6E1A               	movwf	_min+1,c
  1198  000D02  0E3B               	movlw	59
  1199  000D04  6E19               	movwf	_min,c
  1200  000D06                     l1425:
  1201                           
  1202                           ;4-7seg.c: 199: }
  1203                           ;4-7seg.c: 200: }
  1204                           ;4-7seg.c: 201: }
  1205                           ;4-7seg.c: 202: disp[0]=LED[sec%10];
  1206  000D06  C025  F043         	movff	_sec,___lwmod@dividend
  1207  000D0A  C026  F044         	movff	_sec+1,___lwmod@dividend+1
  1208  000D0E  0E00               	movlw	0
  1209  000D10  6E46               	movwf	___lwmod@divisor+1,c
  1210  000D12  0E0A               	movlw	10
  1211  000D14  6E45               	movwf	___lwmod@divisor,c
  1212  000D16  ECCC  F008         	call	___lwmod	;wreg free
  1213  000D1A  0E31               	movlw	low _LED
  1214  000D1C  2443               	addwf	?___lwmod,w,c
  1215  000D1E  6EF6               	movwf	tblptrl,c
  1216  000D20  0E08               	movlw	high _LED
  1217  000D22  2044               	addwfc	?___lwmod+1,w,c
  1218  000D24  6EF7               	movwf	tblptrh,c
  1219  000D26                     	if	0	;There are less than 3 active tblptr bytes
  1220  000D26                     	endif
  1221  000D26  0008               	tblrd		*
  1222  000D28  CFF5 F001          	movff	tablat,_disp
  1223                           
  1224                           ;4-7seg.c: 203: disp[1]=LED[sec/10%10];
  1225  000D2C  0E00               	movlw	0
  1226  000D2E  6E3F               	movwf	___lwdiv@divisor+1,c
  1227  000D30  0E0A               	movlw	10
  1228  000D32  6E3E               	movwf	___lwdiv@divisor,c
  1229  000D34  C025  F03C         	movff	_sec,___lwdiv@dividend
  1230  000D38  C026  F03D         	movff	_sec+1,___lwdiv@dividend+1
  1231  000D3C  ECA3  F008         	call	___lwdiv	;wreg free
  1232  000D40  C03C  F043         	movff	?___lwdiv,___lwmod@dividend
  1233  000D44  C03D  F044         	movff	?___lwdiv+1,___lwmod@dividend+1
  1234  000D48  0E00               	movlw	0
  1235  000D4A  6E46               	movwf	___lwmod@divisor+1,c
  1236  000D4C  0E0A               	movlw	10
  1237  000D4E  6E45               	movwf	___lwmod@divisor,c
  1238  000D50  ECCC  F008         	call	___lwmod	;wreg free
  1239  000D54  0E31               	movlw	low _LED
  1240  000D56  2443               	addwf	?___lwmod,w,c
  1241  000D58  6EF6               	movwf	tblptrl,c
  1242  000D5A  0E08               	movlw	high _LED
  1243  000D5C  2044               	addwfc	?___lwmod+1,w,c
  1244  000D5E  6EF7               	movwf	tblptrh,c
  1245  000D60                     	if	0	;There are less than 3 active tblptr bytes
  1246  000D60                     	endif
  1247  000D60  0008               	tblrd		*
  1248  000D62  CFF5 F002          	movff	tablat,_disp+1
  1249                           
  1250                           ;4-7seg.c: 204: if(Timer250m){
  1251  000D66  5005               	movf	_Timer250m,w,c
  1252  000D68  1006               	iorwf	_Timer250m+1,w,c
  1253  000D6A  B4D8               	btfsc	status,2,c
  1254  000D6C  D00D               	goto	l1433
  1255                           
  1256                           ;4-7seg.c: 205: disp[2]=LED[(min+10)%10];
  1257  000D6E  0E0A               	movlw	10
  1258  000D70  2419               	addwf	_min,w,c
  1259  000D72  6E43               	movwf	___lwmod@dividend,c
  1260  000D74  0E00               	movlw	0
  1261  000D76  201A               	addwfc	_min+1,w,c
  1262  000D78  6E44               	movwf	___lwmod@dividend+1,c
  1263  000D7A  0E00               	movlw	0
  1264  000D7C  6E46               	movwf	___lwmod@divisor+1,c
  1265  000D7E  0E0A               	movlw	10
  1266  000D80  6E45               	movwf	___lwmod@divisor,c
  1267  000D82  ECCC  F008         	call	___lwmod	;wreg free
  1268  000D86  D00A               	goto	L5
  1269  000D88                     l1433:
  1270                           
  1271                           ;4-7seg.c: 207: disp[2]=LED[min%10];
  1272  000D88  C019  F043         	movff	_min,___lwmod@dividend
  1273  000D8C  C01A  F044         	movff	_min+1,___lwmod@dividend+1
  1274  000D90  0E00               	movlw	0
  1275  000D92  6E46               	movwf	___lwmod@divisor+1,c
  1276  000D94  0E0A               	movlw	10
  1277  000D96  6E45               	movwf	___lwmod@divisor,c
  1278  000D98  ECCC  F008         	call	___lwmod	;wreg free
  1279  000D9C                     L5:
  1280  000D9C  0E31               	movlw	low _LED
  1281  000D9E  2443               	addwf	?___lwmod,w,c
  1282  000DA0  6EF6               	movwf	tblptrl,c
  1283  000DA2  0E08               	movlw	high _LED
  1284  000DA4  2044               	addwfc	?___lwmod+1,w,c
  1285  000DA6  6EF7               	movwf	tblptrh,c
  1286  000DA8                     	if	0	;There are less than 3 active tblptr bytes
  1287  000DA8                     	endif
  1288  000DA8  0008               	tblrd		*
  1289  000DAA  CFF5 F003          	movff	tablat,_disp+2
  1290                           
  1291                           ;4-7seg.c: 208: }
  1292                           ;4-7seg.c: 209: disp[3]=LED[min/10%10];
  1293  000DAE  0E00               	movlw	0
  1294  000DB0  6E3F               	movwf	___lwdiv@divisor+1,c
  1295  000DB2  0E0A               	movlw	10
  1296  000DB4  6E3E               	movwf	___lwdiv@divisor,c
  1297  000DB6  C019  F03C         	movff	_min,___lwdiv@dividend
  1298  000DBA  C01A  F03D         	movff	_min+1,___lwdiv@dividend+1
  1299  000DBE  ECA3  F008         	call	___lwdiv	;wreg free
  1300  000DC2  C03C  F043         	movff	?___lwdiv,___lwmod@dividend
  1301  000DC6  C03D  F044         	movff	?___lwdiv+1,___lwmod@dividend+1
  1302  000DCA  0E00               	movlw	0
  1303  000DCC  6E46               	movwf	___lwmod@divisor+1,c
  1304  000DCE  0E0A               	movlw	10
  1305  000DD0  6E45               	movwf	___lwmod@divisor,c
  1306  000DD2  ECCC  F008         	call	___lwmod	;wreg free
  1307  000DD6                     L7:
  1308  000DD6  0E31               	movlw	low _LED
  1309  000DD8  2443               	addwf	?___lwmod,w,c
  1310  000DDA  6EF6               	movwf	tblptrl,c
  1311  000DDC  0E08               	movlw	high _LED
  1312  000DDE  2044               	addwfc	?___lwmod+1,w,c
  1313  000DE0  D773               	goto	L6
  1314  000DE2                     l1435:
  1315                           
  1316                           ;4-7seg.c: 214: if (rrr){
  1317  000DE2  5023               	movf	_rrr,w,c
  1318  000DE4  1024               	iorwf	_rrr+1,w,c
  1319  000DE6  B4D8               	btfsc	status,2,c
  1320  000DE8  D040               	goto	l1459
  1321                           
  1322                           ;4-7seg.c: 215: rrr=0;
  1323  000DEA  0E00               	movlw	0
  1324  000DEC  6E24               	movwf	_rrr+1,c
  1325  000DEE  0E00               	movlw	0
  1326  000DF0  6E23               	movwf	_rrr,c
  1327                           
  1328                           ;4-7seg.c: 216: if(++mq>11)mq=0;
  1329  000DF2  4A1B               	infsnz	_mq,f,c
  1330  000DF4  2A1C               	incf	_mq+1,f,c
  1331  000DF6  BE1C               	btfsc	_mq+1,7,c
  1332  000DF8  D038               	goto	l1459
  1333  000DFA  501C               	movf	_mq+1,w,c
  1334  000DFC  E104               	bnz	u910
  1335  000DFE  0E0C               	movlw	12
  1336  000E00  5C1B               	subwf	_mq,w,c
  1337  000E02  A0D8               	btfss	status,0,c
  1338  000E04  D032               	goto	l1459
  1339  000E06                     u910:
  1340  000E06  0E00               	movlw	0
  1341  000E08  6E1C               	movwf	_mq+1,c
  1342  000E0A  0E00               	movlw	0
  1343  000E0C  6E1B               	movwf	_mq,c
  1344  000E0E  D02D               	goto	l1459
  1345  000E10                     l1445:
  1346                           
  1347                           ;4-7seg.c: 219: disp[1]=MQ[mq+12];
  1348  000E10  0E0C               	movlw	12
  1349  000E12  241B               	addwf	_mq,w,c
  1350  000E14  6E4A               	movwf	??_main& (0+255),c
  1351  000E16  0E00               	movlw	0
  1352  000E18  201C               	addwfc	_mq+1,w,c
  1353  000E1A  6E4B               	movwf	(??_main+1)& (0+255),c
  1354  000E1C  0E01               	movlw	low _MQ
  1355  000E1E  244A               	addwf	??_main,w,c
  1356  000E20  6EF6               	movwf	tblptrl,c
  1357  000E22  0E08               	movlw	high _MQ
  1358  000E24  204B               	addwfc	??_main+1,w,c
  1359  000E26  6EF7               	movwf	tblptrh,c
  1360  000E28                     	if	0	;There are less than 3 active tblptr bytes
  1361  000E28                     	endif
  1362  000E28  0008               	tblrd		*
  1363  000E2A  CFF5 F002          	movff	tablat,_disp+1
  1364  000E2E  D027               	goto	l1463
  1365  000E30                     l1449:
  1366                           
  1367                           ;4-7seg.c: 221: disp[3]=MQ[mq+36];
  1368  000E30  0E24               	movlw	36
  1369  000E32  241B               	addwf	_mq,w,c
  1370  000E34  6E4A               	movwf	??_main& (0+255),c
  1371  000E36  0E00               	movlw	0
  1372  000E38  201C               	addwfc	_mq+1,w,c
  1373  000E3A  6E4B               	movwf	(??_main+1)& (0+255),c
  1374  000E3C  0E01               	movlw	low _MQ
  1375  000E3E  244A               	addwf	??_main,w,c
  1376  000E40  6EF6               	movwf	tblptrl,c
  1377  000E42  0E08               	movlw	high _MQ
  1378  000E44  204B               	addwfc	??_main+1,w,c
  1379  000E46  D740               	goto	L6
  1380  000E48                     l1451:
  1381                           
  1382                           ;4-7seg.c: 226: if (rrr){
  1383  000E48  5023               	movf	_rrr,w,c
  1384  000E4A  1024               	iorwf	_rrr+1,w,c
  1385  000E4C  B4D8               	btfsc	status,2,c
  1386  000E4E  D00D               	goto	l1459
  1387                           
  1388                           ;4-7seg.c: 227: rrr=0;
  1389  000E50  0E00               	movlw	0
  1390  000E52  6E24               	movwf	_rrr+1,c
  1391  000E54  0E00               	movlw	0
  1392  000E56  6E23               	movwf	_rrr,c
  1393                           
  1394                           ;4-7seg.c: 228: if(--mq<0)mq=11;
  1395  000E58  061B               	decf	_mq,f,c
  1396  000E5A  A0D8               	btfss	status,0,c
  1397  000E5C  061C               	decf	_mq+1,f,c
  1398  000E5E  AE1C               	btfss	_mq+1,7,c
  1399  000E60  D004               	goto	l1459
  1400  000E62  0E00               	movlw	0
  1401  000E64  6E1C               	movwf	_mq+1,c
  1402  000E66  0E0B               	movlw	11
  1403  000E68  D7D1               	goto	L8
  1404  000E6A                     l1459:
  1405                           
  1406                           ;4-7seg.c: 229: }
  1407                           ;4-7seg.c: 230: disp[0]=MQ[mq];
  1408  000E6A  0E01               	movlw	low _MQ
  1409  000E6C  241B               	addwf	_mq,w,c
  1410  000E6E  6EF6               	movwf	tblptrl,c
  1411  000E70  0E08               	movlw	high _MQ
  1412  000E72  201C               	addwfc	_mq+1,w,c
  1413  000E74  6EF7               	movwf	tblptrh,c
  1414  000E76                     	if	0	;There are less than 3 active tblptr bytes
  1415  000E76                     	endif
  1416  000E76  0008               	tblrd		*
  1417  000E78  CFF5 F001          	movff	tablat,_disp
  1418  000E7C  D7C9               	goto	l1445
  1419  000E7E                     l1463:
  1420                           
  1421                           ;4-7seg.c: 232: disp[2]=MQ[mq+24];
  1422  000E7E  0E18               	movlw	24
  1423  000E80  241B               	addwf	_mq,w,c
  1424  000E82  6E4A               	movwf	??_main& (0+255),c
  1425  000E84  0E00               	movlw	0
  1426  000E86  201C               	addwfc	_mq+1,w,c
  1427  000E88  6E4B               	movwf	(??_main+1)& (0+255),c
  1428  000E8A  0E01               	movlw	low _MQ
  1429  000E8C  244A               	addwf	??_main,w,c
  1430  000E8E  6EF6               	movwf	tblptrl,c
  1431  000E90  0E08               	movlw	high _MQ
  1432  000E92  204B               	addwfc	??_main+1,w,c
  1433  000E94  6EF7               	movwf	tblptrh,c
  1434  000E96                     	if	0	;There are less than 3 active tblptr bytes
  1435  000E96                     	endif
  1436  000E96  0008               	tblrd		*
  1437  000E98  CFF5 F003          	movff	tablat,_disp+2
  1438  000E9C  D7C9               	goto	l1449
  1439  000E9E                     l1467:
  1440                           
  1441                           ;4-7seg.c: 238: disp[0]=LED[0];
  1442  000E9E  0E31               	movlw	low _LED
  1443  000EA0  6EF6               	movwf	tblptrl,c
  1444  000EA2                     	if	1	;There is more than 1 active tblptr byte
  1445  000EA2  0E08               	movlw	high _LED
  1446  000EA4  6EF7               	movwf	tblptrh,c
  1447  000EA6                     	endif
  1448  000EA6                     	if	0	;There are less than 3 active tblptr bytes
  1449  000EA6                     	endif
  1450  000EA6  0008               	tblrd		*
  1451  000EA8  CFF5 F001          	movff	tablat,_disp
  1452                           
  1453                           ;4-7seg.c: 239: disp[1]=LED[0];
  1454  000EAC  0E31               	movlw	low _LED
  1455  000EAE  6EF6               	movwf	tblptrl,c
  1456  000EB0                     	if	1	;There is more than 1 active tblptr byte
  1457  000EB0  0E08               	movlw	high _LED
  1458  000EB2  6EF7               	movwf	tblptrh,c
  1459  000EB4                     	endif
  1460  000EB4                     	if	0	;There are less than 3 active tblptr bytes
  1461  000EB4                     	endif
  1462  000EB4  0008               	tblrd		*
  1463  000EB6  CFF5 F002          	movff	tablat,_disp+1
  1464                           
  1465                           ;4-7seg.c: 240: disp[2]=LED[0];
  1466  000EBA  0E31               	movlw	low _LED
  1467  000EBC  6EF6               	movwf	tblptrl,c
  1468  000EBE                     	if	1	;There is more than 1 active tblptr byte
  1469  000EBE  0E08               	movlw	high _LED
  1470  000EC0  6EF7               	movwf	tblptrh,c
  1471  000EC2                     	endif
  1472  000EC2                     	if	0	;There are less than 3 active tblptr bytes
  1473  000EC2                     	endif
  1474  000EC2  0008               	tblrd		*
  1475  000EC4  CFF5 F003          	movff	tablat,_disp+2
  1476                           
  1477                           ;4-7seg.c: 241: disp[3]=LED[0];
  1478  000EC8  0E31               	movlw	low _LED
  1479  000ECA  6EF6               	movwf	tblptrl,c
  1480  000ECC                     	if	1	;There is more than 1 active tblptr byte
  1481  000ECC  0E08               	movlw	high _LED
  1482  000ECE  6EF7               	movwf	tblptrh,c
  1483  000ED0                     	endif
  1484  000ED0                     	if	0	;There are less than 3 active tblptr bytes
  1485  000ED0  D5EA               	goto	L2
  1486  000ED2                     l1471:
  1487  000ED2  C007  F04A         	movff	_a,??_main
  1488  000ED6  C008  F04B         	movff	_a+1,??_main+1
  1489                           
  1490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1491                           ; Switch size 1, requested type "space"
  1492                           ; Number of cases is 1, Range of values is 0 to 0
  1493                           ; switch strategies available:
  1494                           ; Name         Instructions Cycles
  1495                           ; simple_byte            4     3 (average)
  1496                           ;	Chosen strategy is simple_byte
  1497  000EDA  504B               	movf	??_main+1,w,c
  1498  000EDC  0A00               	xorlw	0	; case 0
  1499  000EDE  A4D8               	btfss	status,2,c
  1500  000EE0  D019               	goto	l1473
  1501                           
  1502                           ; Switch size 1, requested type "space"
  1503                           ; Number of cases is 8, Range of values is 1 to 8
  1504                           ; switch strategies available:
  1505                           ; Name         Instructions Cycles
  1506                           ; simple_byte           25    13 (average)
  1507                           ;	Chosen strategy is simple_byte
  1508  000EE2  504A               	movf	??_main,w,c
  1509  000EE4  0A01               	xorlw	1	; case 1
  1510  000EE6  B4D8               	btfsc	status,2,c
  1511  000EE8  D7DA               	goto	l1467
  1512  000EEA  0A03               	xorlw	3	; case 2
  1513  000EEC  B4D8               	btfsc	status,2,c
  1514  000EEE  D55F               	goto	l1359
  1515  000EF0  0A01               	xorlw	1	; case 3
  1516  000EF2  B4D8               	btfsc	status,2,c
  1517  000EF4  D5DC               	goto	l1375
  1518  000EF6  0A07               	xorlw	7	; case 4
  1519  000EF8  B4D8               	btfsc	status,2,c
  1520  000EFA  D656               	goto	l1391
  1521  000EFC  0A01               	xorlw	1	; case 5
  1522  000EFE  B4D8               	btfsc	status,2,c
  1523  000F00  D6E5               	goto	l1413
  1524  000F02  0A03               	xorlw	3	; case 6
  1525  000F04  B4D8               	btfsc	status,2,c
  1526  000F06  D76D               	goto	l1435
  1527  000F08  0A01               	xorlw	1	; case 7
  1528  000F0A  B4D8               	btfsc	status,2,c
  1529  000F0C  D79D               	goto	l1451
  1530  000F0E  0A0F               	xorlw	15	; case 8
  1531  000F10  B4D8               	btfsc	status,2,c
  1532  000F12  D7C5               	goto	l1467
  1533  000F14                     l1473:
  1534                           
  1535                           ;4-7seg.c: 249: OutPortB=PORTB & 0xf0;
  1536  000F14  5081               	movf	3969,w,c	;volatile
  1537  000F16  0BF0               	andlw	240
  1538  000F18  6E29               	movwf	_OutPortB,c
  1539                           
  1540                           ;4-7seg.c: 250: PORTD=0xff;
  1541  000F1A  6883               	setf	3971,c	;volatile
  1542                           
  1543                           ;4-7seg.c: 251: PORTB=OutPortB | 0x0f;
  1544  000F1C  5029               	movf	_OutPortB,w,c
  1545  000F1E  090F               	iorlw	15
  1546  000F20  6E81               	movwf	3969,c	;volatile
  1547                           
  1548                           ;4-7seg.c: 252: if(++i>3)i=0;
  1549  000F22  4A11               	infsnz	_i,f,c
  1550  000F24  2A12               	incf	_i+1,f,c
  1551  000F26  5012               	movf	_i+1,w,c
  1552  000F28  E104               	bnz	u940
  1553  000F2A  0E04               	movlw	4
  1554  000F2C  5C11               	subwf	_i,w,c
  1555  000F2E  A0D8               	btfss	status,0,c
  1556  000F30  D004               	goto	l1479
  1557  000F32                     u940:
  1558  000F32  0E00               	movlw	0
  1559  000F34  6E12               	movwf	_i+1,c
  1560  000F36  0E00               	movlw	0
  1561  000F38  6E11               	movwf	_i,c
  1562  000F3A                     l1479:
  1563                           
  1564                           ;4-7seg.c: 253: OutPortB = OutPortB | (~ScanLine[i]);
  1565  000F3A  0E4C               	movlw	low _ScanLine
  1566  000F3C  2411               	addwf	_i,w,c
  1567  000F3E  6ED9               	movwf	fsr2l,c
  1568  000F40  0E00               	movlw	high _ScanLine
  1569  000F42  2012               	addwfc	_i+1,w,c
  1570  000F44  6EDA               	movwf	fsr2h,c
  1571  000F46  50DF               	movf	indf2,w,c
  1572  000F48  0AFF               	xorlw	255
  1573  000F4A  1029               	iorwf	_OutPortB,w,c
  1574  000F4C  6E29               	movwf	_OutPortB,c
  1575                           
  1576                           ;4-7seg.c: 254: PORTB = OutPortB;
  1577  000F4E  C029  FF81         	movff	_OutPortB,3969	;volatile
  1578                           
  1579                           ;4-7seg.c: 255: PORTD=~disp[i];
  1580  000F52  0E01               	movlw	low _disp
  1581  000F54  2411               	addwf	_i,w,c
  1582  000F56  6ED9               	movwf	fsr2l,c
  1583  000F58  0E00               	movlw	high _disp
  1584  000F5A  2012               	addwfc	_i+1,w,c
  1585  000F5C  6EDA               	movwf	fsr2h,c
  1586  000F5E  50DF               	movf	indf2,w,c
  1587  000F60  0AFF               	xorlw	255
  1588  000F62  6E83               	movwf	3971,c	;volatile
  1589                           
  1590                           ;4-7seg.c: 258: if (T0Flag)
  1591  000F64  502A               	movf	_T0Flag,w,c
  1592  000F66  B4D8               	btfsc	status,2,c
  1593  000F68  D49A               	goto	l113
  1594                           
  1595                           ;4-7seg.c: 259: {
  1596                           ;4-7seg.c: 260: T0Flag = 0;
  1597  000F6A  0E00               	movlw	0
  1598  000F6C  6E2A               	movwf	_T0Flag,c
  1599                           
  1600                           ;4-7seg.c: 261: if(++r>1)
  1601  000F6E  4A1D               	infsnz	_r,f,c
  1602  000F70  2A1E               	incf	_r+1,f,c
  1603  000F72  BE1E               	btfsc	_r+1,7,c
  1604  000F74  D00E               	goto	l1491
  1605  000F76  501E               	movf	_r+1,w,c
  1606  000F78  E104               	bnz	u960
  1607  000F7A  0E02               	movlw	2
  1608  000F7C  5C1D               	subwf	_r,w,c
  1609  000F7E  A0D8               	btfss	status,0,c
  1610  000F80  D008               	goto	l1491
  1611  000F82                     u960:
  1612                           
  1613                           ;4-7seg.c: 262: {
  1614                           ;4-7seg.c: 263: r=0;
  1615  000F82  0E00               	movlw	0
  1616  000F84  6E1E               	movwf	_r+1,c
  1617  000F86  0E00               	movlw	0
  1618  000F88  6E1D               	movwf	_r,c
  1619                           
  1620                           ;4-7seg.c: 264: rrr=1;
  1621  000F8A  0E00               	movlw	0
  1622  000F8C  6E24               	movwf	_rrr+1,c
  1623  000F8E  0E01               	movlw	1
  1624  000F90  6E23               	movwf	_rrr,c
  1625  000F92                     l1491:
  1626                           
  1627                           ;4-7seg.c: 265: }
  1628                           ;4-7seg.c: 266: if(++e>14)
  1629  000F92  4A0B               	infsnz	_e,f,c
  1630  000F94  2A0C               	incf	_e+1,f,c
  1631  000F96  BE0C               	btfsc	_e+1,7,c
  1632  000F98  D00C               	goto	l1497
  1633  000F9A  500C               	movf	_e+1,w,c
  1634  000F9C  E104               	bnz	u970
  1635  000F9E  0E0F               	movlw	15
  1636  000FA0  5C0B               	subwf	_e,w,c
  1637  000FA2  A0D8               	btfss	status,0,c
  1638  000FA4  D006               	goto	l1497
  1639  000FA6                     u970:
  1640                           
  1641                           ;4-7seg.c: 267: {
  1642                           ;4-7seg.c: 268: e=0;
  1643  000FA6  0E00               	movlw	0
  1644  000FA8  6E0C               	movwf	_e+1,c
  1645  000FAA  0E00               	movlw	0
  1646  000FAC  6E0B               	movwf	_e,c
  1647                           
  1648                           ;4-7seg.c: 269: Timer250m=~Timer250m;
  1649  000FAE  1E05               	comf	_Timer250m,f,c
  1650  000FB0  1E06               	comf	_Timer250m+1,f,c
  1651  000FB2                     l1497:
  1652                           
  1653                           ;4-7seg.c: 270: }
  1654                           ;4-7seg.c: 271: if(++t>29)
  1655  000FB2  4A27               	infsnz	_t,f,c
  1656  000FB4  2A28               	incf	_t+1,f,c
  1657  000FB6  5028               	movf	_t+1,w,c
  1658  000FB8  E104               	bnz	u980
  1659  000FBA  0E1E               	movlw	30
  1660  000FBC  5C27               	subwf	_t,w,c
  1661  000FBE  A0D8               	btfss	status,0,c
  1662  000FC0  D46E               	goto	l113
  1663  000FC2                     u980:
  1664                           
  1665                           ;4-7seg.c: 272: {
  1666                           ;4-7seg.c: 273: t=0;
  1667  000FC2  0E00               	movlw	0
  1668  000FC4  6E28               	movwf	_t+1,c
  1669  000FC6  0E00               	movlw	0
  1670  000FC8  6E27               	movwf	_t,c
  1671                           
  1672                           ;4-7seg.c: 274: Timer500m=1;
  1673  000FCA  0E01               	movlw	1
  1674  000FCC  6E2C               	movwf	_Timer500m,c
  1675  000FCE  D467               	goto	l113
  1676  000FD0                     __end_of_main:
  1677                           	opt stack 0
  1678                           tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           intcon	equ	0xFF2
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           fsr2h	equ	0xFDA
  1689                           fsr2l	equ	0xFD9
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function ___lwmod *****************
  1693 ;; Defined at:
  1694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  dividend        2   21[COMRAM] unsigned int 
  1697 ;;  divisor         2   23[COMRAM] unsigned int 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  counter         1   25[COMRAM] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  2   21[COMRAM] unsigned int 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2, status,0
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1709 ;;      Params:         4       0       0       0       0       0       0       0       0
  1710 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1712 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1713 ;;Total ram usage:        5 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    1
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text1
  1724  001198                     __ptext1:
  1725                           	opt stack 0
  1726  001198                     ___lwmod:
  1727                           	opt stack 29
  1728                           
  1729                           ;incstack = 0
  1730  001198  5045               	movf	___lwmod@divisor,w,c
  1731  00119A  1046               	iorwf	___lwmod@divisor+1,w,c
  1732  00119C  B4D8               	btfsc	status,2,c
  1733  00119E  D018               	goto	l576
  1734  0011A0  0E01               	movlw	1
  1735  0011A2  6E47               	movwf	___lwmod@counter,c
  1736  0011A4  D004               	goto	l1247
  1737  0011A6                     l1245:
  1738  0011A6  90D8               	bcf	status,0,c
  1739  0011A8  3645               	rlcf	___lwmod@divisor,f,c
  1740  0011AA  3646               	rlcf	___lwmod@divisor+1,f,c
  1741  0011AC  2A47               	incf	___lwmod@counter,f,c
  1742  0011AE                     l1247:
  1743  0011AE  AE46               	btfss	___lwmod@divisor+1,7,c
  1744  0011B0  D7FA               	goto	l1245
  1745  0011B2                     l1249:
  1746  0011B2  5045               	movf	___lwmod@divisor,w,c
  1747  0011B4  5C43               	subwf	___lwmod@dividend,w,c
  1748  0011B6  5046               	movf	___lwmod@divisor+1,w,c
  1749  0011B8  5844               	subwfb	___lwmod@dividend+1,w,c
  1750  0011BA  A0D8               	btfss	status,0,c
  1751  0011BC  D004               	goto	l1253
  1752  0011BE  5045               	movf	___lwmod@divisor,w,c
  1753  0011C0  5E43               	subwf	___lwmod@dividend,f,c
  1754  0011C2  5046               	movf	___lwmod@divisor+1,w,c
  1755  0011C4  5A44               	subwfb	___lwmod@dividend+1,f,c
  1756  0011C6                     l1253:
  1757  0011C6  90D8               	bcf	status,0,c
  1758  0011C8  3246               	rrcf	___lwmod@divisor+1,f,c
  1759  0011CA  3245               	rrcf	___lwmod@divisor,f,c
  1760  0011CC  2E47               	decfsz	___lwmod@counter,f,c
  1761  0011CE  D7F1               	goto	l1249
  1762  0011D0                     l576:
  1763  0011D0  C043  F043         	movff	___lwmod@dividend,?___lwmod
  1764  0011D4  C044  F044         	movff	___lwmod@dividend+1,?___lwmod+1
  1765  0011D8  0012               	return		;funcret
  1766  0011DA                     __end_of___lwmod:
  1767                           	opt stack 0
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           intcon	equ	0xFF2
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           postdec1	equ	0xFE5
  1776                           fsr1l	equ	0xFE1
  1777                           indf2	equ	0xFDF
  1778                           fsr2h	equ	0xFDA
  1779                           fsr2l	equ	0xFD9
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function ___lwdiv *****************
  1783 ;; Defined at:
  1784 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  dividend        2   14[COMRAM] unsigned int 
  1787 ;;  divisor         2   16[COMRAM] unsigned int 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  quotient        2   18[COMRAM] unsigned int 
  1790 ;;  counter         1   20[COMRAM] unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  2   14[COMRAM] unsigned int 
  1793 ;; Registers used:
  1794 ;;		wreg, status,2, status,0
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1800 ;;      Params:         4       0       0       0       0       0       0       0       0
  1801 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1803 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1804 ;;Total ram usage:        7 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    1
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text2
  1815  001146                     __ptext2:
  1816                           	opt stack 0
  1817  001146                     ___lwdiv:
  1818                           	opt stack 29
  1819                           
  1820                           ;incstack = 0
  1821  001146  0E00               	movlw	0
  1822  001148  6E41               	movwf	___lwdiv@quotient+1,c
  1823  00114A  0E00               	movlw	0
  1824  00114C  6E40               	movwf	___lwdiv@quotient,c
  1825  00114E  503E               	movf	___lwdiv@divisor,w,c
  1826  001150  103F               	iorwf	___lwdiv@divisor+1,w,c
  1827  001152  B4D8               	btfsc	status,2,c
  1828  001154  D01C               	goto	l566
  1829  001156  0E01               	movlw	1
  1830  001158  6E42               	movwf	___lwdiv@counter,c
  1831  00115A  D004               	goto	l1227
  1832  00115C                     l1225:
  1833  00115C  90D8               	bcf	status,0,c
  1834  00115E  363E               	rlcf	___lwdiv@divisor,f,c
  1835  001160  363F               	rlcf	___lwdiv@divisor+1,f,c
  1836  001162  2A42               	incf	___lwdiv@counter,f,c
  1837  001164                     l1227:
  1838  001164  AE3F               	btfss	___lwdiv@divisor+1,7,c
  1839  001166  D7FA               	goto	l1225
  1840  001168                     l1229:
  1841  001168  90D8               	bcf	status,0,c
  1842  00116A  3640               	rlcf	___lwdiv@quotient,f,c
  1843  00116C  3641               	rlcf	___lwdiv@quotient+1,f,c
  1844  00116E  503E               	movf	___lwdiv@divisor,w,c
  1845  001170  5C3C               	subwf	___lwdiv@dividend,w,c
  1846  001172  503F               	movf	___lwdiv@divisor+1,w,c
  1847  001174  583D               	subwfb	___lwdiv@dividend+1,w,c
  1848  001176  A0D8               	btfss	status,0,c
  1849  001178  D005               	goto	l1237
  1850  00117A  503E               	movf	___lwdiv@divisor,w,c
  1851  00117C  5E3C               	subwf	___lwdiv@dividend,f,c
  1852  00117E  503F               	movf	___lwdiv@divisor+1,w,c
  1853  001180  5A3D               	subwfb	___lwdiv@dividend+1,f,c
  1854  001182  8040               	bsf	___lwdiv@quotient,0,c
  1855  001184                     l1237:
  1856  001184  90D8               	bcf	status,0,c
  1857  001186  323F               	rrcf	___lwdiv@divisor+1,f,c
  1858  001188  323E               	rrcf	___lwdiv@divisor,f,c
  1859  00118A  2E42               	decfsz	___lwdiv@counter,f,c
  1860  00118C  D7ED               	goto	l1229
  1861  00118E                     l566:
  1862  00118E  C040  F03C         	movff	___lwdiv@quotient,?___lwdiv
  1863  001192  C041  F03D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1864  001196  0012               	return		;funcret
  1865  001198                     __end_of___lwdiv:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           intcon	equ	0xFF2
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function ___awmod *****************
  1882 ;; Defined at:
  1883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  dividend        2   22[COMRAM] int 
  1886 ;;  divisor         2   24[COMRAM] int 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  sign            1   27[COMRAM] unsigned char 
  1889 ;;  counter         1   26[COMRAM] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  2   22[COMRAM] int 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1899 ;;      Params:         4       0       0       0       0       0       0       0       0
  1900 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1902 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1903 ;;Total ram usage:        6 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text3
  1914  0010D6                     __ptext3:
  1915                           	opt stack 0
  1916  0010D6                     ___awmod:
  1917                           	opt stack 29
  1918                           
  1919                           ;incstack = 0
  1920  0010D6  0E00               	movlw	0
  1921  0010D8  6E49               	movwf	___awmod@sign,c
  1922  0010DA  AE45               	btfss	___awmod@dividend+1,7,c
  1923  0010DC  D006               	goto	l1191
  1924  0010DE  6C44               	negf	___awmod@dividend,c
  1925  0010E0  1E45               	comf	___awmod@dividend+1,f,c
  1926  0010E2  B0D8               	btfsc	status,0,c
  1927  0010E4  2A45               	incf	___awmod@dividend+1,f,c
  1928  0010E6  0E01               	movlw	1
  1929  0010E8  6E49               	movwf	___awmod@sign,c
  1930  0010EA                     l1191:
  1931  0010EA  AE47               	btfss	___awmod@divisor+1,7,c
  1932  0010EC  D004               	goto	l1195
  1933  0010EE  6C46               	negf	___awmod@divisor,c
  1934  0010F0  1E47               	comf	___awmod@divisor+1,f,c
  1935  0010F2  B0D8               	btfsc	status,0,c
  1936  0010F4  2A47               	incf	___awmod@divisor+1,f,c
  1937  0010F6                     l1195:
  1938  0010F6  5046               	movf	___awmod@divisor,w,c
  1939  0010F8  1047               	iorwf	___awmod@divisor+1,w,c
  1940  0010FA  B4D8               	btfsc	status,2,c
  1941  0010FC  D018               	goto	l1211
  1942  0010FE  0E01               	movlw	1
  1943  001100  6E48               	movwf	___awmod@counter,c
  1944  001102  D004               	goto	l1201
  1945  001104                     l1199:
  1946  001104  90D8               	bcf	status,0,c
  1947  001106  3646               	rlcf	___awmod@divisor,f,c
  1948  001108  3647               	rlcf	___awmod@divisor+1,f,c
  1949  00110A  2A48               	incf	___awmod@counter,f,c
  1950  00110C                     l1201:
  1951  00110C  AE47               	btfss	___awmod@divisor+1,7,c
  1952  00110E  D7FA               	goto	l1199
  1953  001110                     l1203:
  1954  001110  5046               	movf	___awmod@divisor,w,c
  1955  001112  5C44               	subwf	___awmod@dividend,w,c
  1956  001114  5047               	movf	___awmod@divisor+1,w,c
  1957  001116  5845               	subwfb	___awmod@dividend+1,w,c
  1958  001118  A0D8               	btfss	status,0,c
  1959  00111A  D004               	goto	l1207
  1960  00111C  5046               	movf	___awmod@divisor,w,c
  1961  00111E  5E44               	subwf	___awmod@dividend,f,c
  1962  001120  5047               	movf	___awmod@divisor+1,w,c
  1963  001122  5A45               	subwfb	___awmod@dividend+1,f,c
  1964  001124                     l1207:
  1965  001124  90D8               	bcf	status,0,c
  1966  001126  3247               	rrcf	___awmod@divisor+1,f,c
  1967  001128  3246               	rrcf	___awmod@divisor,f,c
  1968  00112A  2E48               	decfsz	___awmod@counter,f,c
  1969  00112C  D7F1               	goto	l1203
  1970  00112E                     l1211:
  1971  00112E  5049               	movf	___awmod@sign,w,c
  1972  001130  B4D8               	btfsc	status,2,c
  1973  001132  D004               	goto	l1215
  1974  001134  6C44               	negf	___awmod@dividend,c
  1975  001136  1E45               	comf	___awmod@dividend+1,f,c
  1976  001138  B0D8               	btfsc	status,0,c
  1977  00113A  2A45               	incf	___awmod@dividend+1,f,c
  1978  00113C                     l1215:
  1979  00113C  C044  F044         	movff	___awmod@dividend,?___awmod
  1980  001140  C045  F045         	movff	___awmod@dividend+1,?___awmod+1
  1981  001144  0012               	return	
  1982  001146                     __end_of___awmod:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           intcon	equ	0xFF2
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           postdec1	equ	0xFE5
  1992                           fsr1l	equ	0xFE1
  1993                           indf2	equ	0xFDF
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function ___awdiv *****************
  1999 ;; Defined at:
  2000 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  dividend        2   14[COMRAM] int 
  2003 ;;  divisor         2   16[COMRAM] int 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  quotient        2   20[COMRAM] int 
  2006 ;;  sign            1   19[COMRAM] unsigned char 
  2007 ;;  counter         1   18[COMRAM] unsigned char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  2   14[COMRAM] int 
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2017 ;;      Params:         4       0       0       0       0       0       0       0       0
  2018 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2020 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2021 ;;Total ram usage:        8 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:    1
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text4
  2032  000FD0                     __ptext4:
  2033                           	opt stack 0
  2034  000FD0                     ___awdiv:
  2035                           	opt stack 29
  2036                           
  2037                           ;incstack = 0
  2038  000FD0  0E00               	movlw	0
  2039  000FD2  6E41               	movwf	___awdiv@sign,c
  2040  000FD4  AE3F               	btfss	___awdiv@divisor+1,7,c
  2041  000FD6  D006               	goto	l1147
  2042  000FD8  6C3E               	negf	___awdiv@divisor,c
  2043  000FDA  1E3F               	comf	___awdiv@divisor+1,f,c
  2044  000FDC  B0D8               	btfsc	status,0,c
  2045  000FDE  2A3F               	incf	___awdiv@divisor+1,f,c
  2046  000FE0  0E01               	movlw	1
  2047  000FE2  6E41               	movwf	___awdiv@sign,c
  2048  000FE4                     l1147:
  2049  000FE4  AE3D               	btfss	___awdiv@dividend+1,7,c
  2050  000FE6  D006               	goto	l1153
  2051  000FE8  6C3C               	negf	___awdiv@dividend,c
  2052  000FEA  1E3D               	comf	___awdiv@dividend+1,f,c
  2053  000FEC  B0D8               	btfsc	status,0,c
  2054  000FEE  2A3D               	incf	___awdiv@dividend+1,f,c
  2055  000FF0  0E01               	movlw	1
  2056  000FF2  1A41               	xorwf	___awdiv@sign,f,c
  2057  000FF4                     l1153:
  2058  000FF4  0E00               	movlw	0
  2059  000FF6  6E43               	movwf	___awdiv@quotient+1,c
  2060  000FF8  0E00               	movlw	0
  2061  000FFA  6E42               	movwf	___awdiv@quotient,c
  2062  000FFC  503E               	movf	___awdiv@divisor,w,c
  2063  000FFE  103F               	iorwf	___awdiv@divisor+1,w,c
  2064  001000  B4D8               	btfsc	status,2,c
  2065  001002  D01C               	goto	l1175
  2066  001004  0E01               	movlw	1
  2067  001006  6E40               	movwf	___awdiv@counter,c
  2068  001008  D004               	goto	l1161
  2069  00100A                     l1159:
  2070  00100A  90D8               	bcf	status,0,c
  2071  00100C  363E               	rlcf	___awdiv@divisor,f,c
  2072  00100E  363F               	rlcf	___awdiv@divisor+1,f,c
  2073  001010  2A40               	incf	___awdiv@counter,f,c
  2074  001012                     l1161:
  2075  001012  AE3F               	btfss	___awdiv@divisor+1,7,c
  2076  001014  D7FA               	goto	l1159
  2077  001016                     l1163:
  2078  001016  90D8               	bcf	status,0,c
  2079  001018  3642               	rlcf	___awdiv@quotient,f,c
  2080  00101A  3643               	rlcf	___awdiv@quotient+1,f,c
  2081  00101C  503E               	movf	___awdiv@divisor,w,c
  2082  00101E  5C3C               	subwf	___awdiv@dividend,w,c
  2083  001020  503F               	movf	___awdiv@divisor+1,w,c
  2084  001022  583D               	subwfb	___awdiv@dividend+1,w,c
  2085  001024  A0D8               	btfss	status,0,c
  2086  001026  D005               	goto	l1171
  2087  001028  503E               	movf	___awdiv@divisor,w,c
  2088  00102A  5E3C               	subwf	___awdiv@dividend,f,c
  2089  00102C  503F               	movf	___awdiv@divisor+1,w,c
  2090  00102E  5A3D               	subwfb	___awdiv@dividend+1,f,c
  2091  001030  8042               	bsf	___awdiv@quotient,0,c
  2092  001032                     l1171:
  2093  001032  90D8               	bcf	status,0,c
  2094  001034  323F               	rrcf	___awdiv@divisor+1,f,c
  2095  001036  323E               	rrcf	___awdiv@divisor,f,c
  2096  001038  2E40               	decfsz	___awdiv@counter,f,c
  2097  00103A  D7ED               	goto	l1163
  2098  00103C                     l1175:
  2099  00103C  5041               	movf	___awdiv@sign,w,c
  2100  00103E  B4D8               	btfsc	status,2,c
  2101  001040  D004               	goto	l1179
  2102  001042  6C42               	negf	___awdiv@quotient,c
  2103  001044  1E43               	comf	___awdiv@quotient+1,f,c
  2104  001046  B0D8               	btfsc	status,0,c
  2105  001048  2A43               	incf	___awdiv@quotient+1,f,c
  2106  00104A                     l1179:
  2107  00104A  C042  F03C         	movff	___awdiv@quotient,?___awdiv
  2108  00104E  C043  F03D         	movff	___awdiv@quotient+1,?___awdiv+1
  2109  001052  0012               	return	
  2110  001054                     __end_of___awdiv:
  2111                           	opt stack 0
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           intcon	equ	0xFF2
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           indf2	equ	0xFDF
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _HighISR *****************
  2127 ;; Defined at:
  2128 ;;		line 281 in file "4-7seg.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, status,2
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2144 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2145 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:       14 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		Interrupt level 2
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	intcode
  2156  000008                     __pintcode:
  2157                           	opt stack 0
  2158  000008                     _HighISR:
  2159                           	opt stack 29
  2160                           
  2161                           ;incstack = 0
  2162  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2163  00000A  CFFA F02E          	movff	pclath,??_HighISR
  2164  00000E  CFFB F02F          	movff	pclatu,??_HighISR+1
  2165  000012  ED2A  F008         	call	int_func,f	;refresh shadow registers
  2166                           pclatu	equ	0xFFB
  2167                           pclath	equ	0xFFA
  2168                           tblptru	equ	0xFF8
  2169                           tblptrh	equ	0xFF7
  2170                           tblptrl	equ	0xFF6
  2171                           tablat	equ	0xFF5
  2172                           intcon	equ	0xFF2
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           fsr1l	equ	0xFE1
  2177                           indf2	equ	0xFDF
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182                           	psect	intcode_body
  2183  001054                     __pintcode_body:
  2184                           	opt stack 29
  2185  001054                     int_func:
  2186                           	opt stack 29
  2187  001054  0006               	pop		; remove dummy address from shadow register refresh
  2188  001056  CFE9 F030          	movff	fsr0l,??_HighISR+2
  2189  00105A  CFEA F031          	movff	fsr0h,??_HighISR+3
  2190  00105E  CFE1 F032          	movff	fsr1l,??_HighISR+4
  2191  001062  CFE2 F033          	movff	fsr1h,??_HighISR+5
  2192  001066  CFD9 F034          	movff	fsr2l,??_HighISR+6
  2193  00106A  CFDA F035          	movff	fsr2h,??_HighISR+7
  2194  00106E  CFF3 F036          	movff	prodl,??_HighISR+8
  2195  001072  CFF4 F037          	movff	prodh,??_HighISR+9
  2196  001076  CFF6 F038          	movff	tblptrl,??_HighISR+10
  2197  00107A  CFF7 F039          	movff	tblptrh,??_HighISR+11
  2198  00107E  CFF8 F03A          	movff	tblptru,??_HighISR+12
  2199  001082  CFF5 F03B          	movff	tablat,??_HighISR+13
  2200                           
  2201                           ;4-7seg.c: 283: if (TMR0IE && TMR0IF)
  2202  001086  BAF2               	btfsc	intcon,5,c	;volatile
  2203  001088  A4F2               	btfss	intcon,2,c	;volatile
  2204  00108A  D007               	goto	i2l163
  2205                           
  2206                           ;4-7seg.c: 284: {
  2207                           ;4-7seg.c: 285: ((void)(TMR0H=((65536-521)>>8),TMR0L=((65536-521)&0xFF)));
  2208  00108C  0EFD               	movlw	253
  2209  00108E  6ED7               	movwf	4055,c	;volatile
  2210  001090  0EF7               	movlw	247
  2211  001092  6ED6               	movwf	4054,c	;volatile
  2212                           
  2213                           ;4-7seg.c: 286: TMR0IF=0;
  2214  001094  94F2               	bcf	intcon,2,c	;volatile
  2215                           
  2216                           ;4-7seg.c: 287: T0Flag = 1;
  2217  001096  0E01               	movlw	1
  2218  001098  6E2A               	movwf	_T0Flag,c
  2219  00109A                     i2l163:
  2220  00109A  C03B  FFF5         	movff	??_HighISR+13,tablat
  2221  00109E  C03A  FFF8         	movff	??_HighISR+12,tblptru
  2222  0010A2  C039  FFF7         	movff	??_HighISR+11,tblptrh
  2223  0010A6  C038  FFF6         	movff	??_HighISR+10,tblptrl
  2224  0010AA  C037  FFF4         	movff	??_HighISR+9,prodh
  2225  0010AE  C036  FFF3         	movff	??_HighISR+8,prodl
  2226  0010B2  C035  FFDA         	movff	??_HighISR+7,fsr2h
  2227  0010B6  C034  FFD9         	movff	??_HighISR+6,fsr2l
  2228  0010BA  C033  FFE2         	movff	??_HighISR+5,fsr1h
  2229  0010BE  C032  FFE1         	movff	??_HighISR+4,fsr1l
  2230  0010C2  C031  FFEA         	movff	??_HighISR+3,fsr0h
  2231  0010C6  C030  FFE9         	movff	??_HighISR+2,fsr0l
  2232  0010CA  C02F  FFFB         	movff	??_HighISR+1,pclatu
  2233  0010CE  C02E  FFFA         	movff	??_HighISR,pclath
  2234  0010D2  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2235  0010D4  0011               	retfie		f
  2236  0010D6                     __end_of_HighISR:
  2237                           	opt stack 0
  2238                           pclatu	equ	0xFFB
  2239                           pclath	equ	0xFFA
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           prodh	equ	0xFF4
  2245                           prodl	equ	0xFF3
  2246                           intcon	equ	0xFF2
  2247                           postinc0	equ	0xFEE
  2248                           fsr0h	equ	0xFEA
  2249                           fsr0l	equ	0xFE9
  2250                           wreg	equ	0xFE8
  2251                           postdec1	equ	0xFE5
  2252                           fsr1h	equ	0xFE2
  2253                           fsr1l	equ	0xFE1
  2254                           indf2	equ	0xFDF
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           pclatu	equ	0xFFB
  2259                           pclath	equ	0xFFA
  2260                           tblptru	equ	0xFF8
  2261                           tblptrh	equ	0xFF7
  2262                           tblptrl	equ	0xFF6
  2263                           tablat	equ	0xFF5
  2264                           prodh	equ	0xFF4
  2265                           prodl	equ	0xFF3
  2266                           intcon	equ	0xFF2
  2267                           postinc0	equ	0xFEE
  2268                           fsr0h	equ	0xFEA
  2269                           fsr0l	equ	0xFE9
  2270                           wreg	equ	0xFE8
  2271                           postdec1	equ	0xFE5
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8
  2278                           
  2279                           	psect	rparam
  2280  0000                     pclatu	equ	0xFFB
  2281                           pclath	equ	0xFFA
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           intcon	equ	0xFF2
  2289                           postinc0	equ	0xFEE
  2290                           fsr0h	equ	0xFEA
  2291                           fsr0l	equ	0xFE9
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1h	equ	0xFE2
  2295                           fsr1l	equ	0xFE1
  2296                           indf2	equ	0xFDF
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           status	equ	0xFD8
  2300                           
  2301                           	psect	temp
  2302  000050                     btemp:
  2303                           	opt stack 0
  2304  000050                     	ds	1
  2305  0000                     int$flags	set	btemp
  2306                           pclatu	equ	0xFFB
  2307                           pclath	equ	0xFFA
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           postinc0	equ	0xFEE
  2316                           fsr0h	equ	0xFEA
  2317                           fsr0l	equ	0xFE9
  2318                           wreg	equ	0xFE8
  2319                           postdec1	equ	0xFE5
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    84
    Data        4
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     30      79
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___awmod
    ___lwmod->___lwdiv
    ___awmod->___awdiv

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3325
                                             28 COMRAM     2     2      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    1019
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     506
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     984
                                             22 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     816
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _HighISR                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1E      4F       1       84.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4F      20        0.0%
DATA                 0      0      4F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Oct 26 22:31:24 2015

                      _a 0007                        _e 000B                        _i 0011  
                      _r 001D                        _t 0027                       _MQ 0801  
           ___awdiv@sign 0041                       _mq 001B              __CFG_BORV$1 000000  
                    l113 089E                      l566 118E                      l576 11D0  
                    _LED 0831                      u910 0E06                      u830 0BCA  
                    u840 0BEA                      u940 0F32                      u960 0F82  
                    u970 0FA6                      u980 0FC2                      _ggg 000D  
                    _col 0009                      _min 0019                      _sec 0025  
                    _hur 000F                      _row 001F                      _rrr 0023  
           ___awmod@sign 0049                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1201 110C  
                   l1203 1110                     l1211 112E                     l1215 113C  
                   l1207 1124                     l1161 1012                     l1153 0FF4  
                   l1225 115C                     l1171 1032                     l1163 1016  
                   l1147 0FE4                     l1227 1164                     l1411 0C78  
                   l1403 0BF2                     l1331 091A                     l1237 1184  
                   l1229 1168                     l1253 11C6                     l1245 11A6  
                   l1413 0CCC                     l1317 08C0                     l1159 100A  
                   l1175 103C                     l1191 10EA                     l1247 11AE  
                   l1343 0950                     l1335 092C                     l1351 098E  
                   l1249 11B2                     l1433 0D88                     l1425 0D06  
                   l1179 104A                     l1195 10F6                     l1451 0E48  
                   l1435 0DE2                     l1339 093E                     l1347 0988  
                   l1355 099E                     l1445 0E10                     l1199 1104  
                   l1463 0E7E                     l1391 0BA8                     l1383 0ADA  
                   l1375 0AAE                     l1367 09E2                     l1359 09AE  
                   l1471 0ED2                     l1449 0E30                     l1473 0F14  
                   l1491 0F92                     l1467 0E9E                     l1459 0E6A  
                   l1479 0F3A                     l1497 0FB2                     _LATB 000F8A  
                   _LATD 000F8C                     _disp 0001                     _main 0856  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 0050                     pclat 000FFA  
                   prodh 000FF4                     prodl 000FF3                     start 0016  
        __end_of_HighISR 10D6            __CFG_MCLRE$ON 000000             ___param_bank 000010  
                  ?_main 002E          __end_of___awdiv 1054          __end_of___awmod 1146  
        ___awdiv@divisor 003E          __end_of___lwdiv 1198          __end_of___lwmod 11DA  
                  i2l163 109A          ___awdiv@counter 0040                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _PORTB 000F81                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISD 000F95                    _kcode 0015  
                  _inval 0013                    tablat 000FF5                    status 000FD8  
        __initialization 11DA             __end_of_main 0FD0                   ??_main 004A  
          __activetblptr 000002                   _ADCON1 000FC1         ___awdiv@dividend 003C  
                 _T0Flag 002A                ??_HighISR 002E                   _TMR0IE 007F95  
                 _TMR0IF 007F92                   _TRISB0 007C98                   _TRISB1 007C99  
                 _TRISB2 007C9A                   _TRISB3 007C9B                   _TRISB4 007C9C  
                 _TRISB5 007C9D                   _TRISE0 007CB0                   _TRISB6 007C9E  
                 _TRISE1 007CB1                   _TRISB7 007C9F                   _TRISE2 007CB2  
                 _TRISC6 007CA6                   _TRISC7 007CA7                   _KeyMap 0845  
         __CFG_XINST$OFF 000000                ??___awdiv 0040                ??___awmod 0048  
              ??___lwdiv 0040                ??___lwmod 0047                   clear_0 11E0  
       ___awdiv@quotient 0042          ___awmod@divisor 0046          ___awmod@counter 0048  
                 _pwmbuf 002D                   _rowkey 0021             __pdataCOMRAM 004C  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 1206  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 002E  
             __end_of_MQ 0831                  _HighISR 0008                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0FD0                  ___awmod 10D6  
                ___lwdiv 1146                  ___lwmod 1198             __psmallconst 0800  
                __pcinit 11DA                  __ramtop 0800                  __ptext0 0856  
                __ptext1 1198                  __ptext2 1146                  __ptext3 10D6  
                __ptext4 0FD0                _T0CONbits 000FD5         ___awmod@dividend 0044  
         __pintcode_body 1054     end_of_initialization 1206            __Lmediumconst 0000  
                int_func 1054                  postdec1 000FE5                  postinc0 000FEE  
              _TRISAbits 000F92           __end_of_KeyMap 0855            __pidataCOMRAM 1214  
    start_initialization 11DA              __end_of_LED 0845                _Timer250m 0005  
              _Timer500m 002C       __CFG_BOR$ON_ACTIVE 000000              __pbssCOMRAM 0001  
               ?_HighISR 002E         ___lwdiv@dividend 003C                __pintcode 0008  
               ?___awdiv 003C                 ?___awmod 0044                 ?___lwdiv 003C  
               ?___lwmod 0043              __smallconst 0800         ___lwdiv@quotient 0040  
              copy_data0 11FA                 _ScanLine 004C         __size_of_HighISR 10CE  
               __Hrparam 0000                 _Timer10m 002B                 __Lrparam 0000  
               _OutPortB 0029         __size_of___awdiv 0084         __size_of___awmod 0070  
       __size_of___lwdiv 0052         __size_of___lwmod 0042          ___lwdiv@divisor 003E  
        ___lwdiv@counter 0042            __size_of_main 077A                 _keypress 0017  
               int$flags 0050               _INTCONbits 000FF2                 intlevel2 0000  
       ___lwmod@dividend 0043          ___lwmod@divisor 0045          ___lwmod@counter 0047  
