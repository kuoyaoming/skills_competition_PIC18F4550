

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Aug 26 21:29:49 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    21  0000                     _ADCON1	set	4033
    22  0000                     _OSCCON	set	4051
    23  0000                     _PORTD	set	3971
    24  0000                     _TRISB	set	3987
    25  0000                     _TRISD	set	3989
    26  0000                     _RB3	set	31755
    27  0000                     _RB4	set	31756
    28  0000                     _RB5	set	31757
    29  0000                     _RD7	set	31775
    30  0000                     _TRISD7	set	31919
    31                           
    32                           ; #config settings
    33  0000                     
    34                           	psect	cinit
    35  007C5A                     __pcinit:
    36                           	opt stack 0
    37  007C5A                     start_initialization:
    38                           	opt stack 0
    39  007C5A                     __initialization:
    40                           	opt stack 0
    41                           
    42                           ; Clear objects allocated to COMRAM (3 bytes)
    43  007C5A  6A0E               	clrf	(__pbssCOMRAM+2)& (0+255),c
    44  007C5C  6A0D               	clrf	(__pbssCOMRAM+1)& (0+255),c
    45  007C5E  6A0C               	clrf	__pbssCOMRAM& (0+255),c
    46  007C60                     end_of_initialization:
    47                           	opt stack 0
    48  007C60                     __end_of__initialization:
    49                           	opt stack 0
    50  007C60  0100               	movlb	0
    51  007C62  EF35  F03F         	goto	_main	;jump to C main() function
    52                           
    53                           	psect	bssCOMRAM
    54  00000C                     __pbssCOMRAM:
    55                           	opt stack 0
    56  00000C                     _a:
    57                           	opt stack 0
    58  00000C                     	ds	2
    59  00000E                     _b:
    60                           	opt stack 0
    61  00000E                     	ds	1
    62                           
    63                           	psect	cstackCOMRAM
    64  000001                     __pcstackCOMRAM:
    65                           	opt stack 0
    66  000001                     ?___awdiv:
    67                           	opt stack 0
    68  000001                     ?___awmod:
    69                           	opt stack 0
    70  000001                     lcd_write_com@combuf:
    71                           	opt stack 0
    72  000001                     lcd_write_data@databuf:
    73                           	opt stack 0
    74  000001                     delay@t:
    75                           	opt stack 0
    76  000001                     ___awdiv@dividend:
    77                           	opt stack 0
    78  000001                     ___awmod@dividend:
    79                           	opt stack 0
    80                           
    81                           ; 2 bytes @ 0x0
    82  000001                     	ds	1
    83  000002                     lcd_write_com_busy@combuf:
    84                           	opt stack 0
    85                           
    86                           ; 1 bytes @ 0x1
    87  000002                     	ds	1
    88  000003                     lcd_write_address@y:
    89                           	opt stack 0
    90  000003                     delay@i:
    91                           	opt stack 0
    92  000003                     ___awdiv@divisor:
    93                           	opt stack 0
    94  000003                     ___awmod@divisor:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x2
    98  000003                     	ds	1
    99  000004                     lcd_write_address@x:
   100                           	opt stack 0
   101                           
   102                           ; 1 bytes @ 0x3
   103  000004                     	ds	1
   104  000005                     ___awdiv@counter:
   105                           	opt stack 0
   106  000005                     ___awmod@counter:
   107                           	opt stack 0
   108  000005                     delay@j:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x4
   112  000005                     	ds	1
   113  000006                     ___awdiv@sign:
   114                           	opt stack 0
   115  000006                     ___awmod@sign:
   116                           	opt stack 0
   117                           
   118                           ; 1 bytes @ 0x5
   119  000006                     	ds	1
   120  000007                     ___awdiv@quotient:
   121                           	opt stack 0
   122                           
   123                           ; 2 bytes @ 0x6
   124  000007                     	ds	2
   125  000009                     lcd_write_char@y:
   126                           	opt stack 0
   127                           
   128                           ; 1 bytes @ 0x8
   129  000009                     	ds	1
   130  00000A                     lcd_write_char@buf:
   131                           	opt stack 0
   132                           
   133                           ; 1 bytes @ 0x9
   134  00000A                     	ds	1
   135  00000B                     lcd_write_char@x:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0xA
   139  00000B                     	ds	1
   140  00000C                     
   141                           ; 0 bytes @ 0xB
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 90 in file "newfile.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;		None
   152 ;; Return value:  Size  Location     Type
   153 ;;		None               void
   154 ;; Registers used:
   155 ;;		wreg, status,2, status,0, cstack
   156 ;; Tracked objects:
   157 ;;		On entry : 0/0
   158 ;;		On exit  : 0/0
   159 ;;		Unchanged: 0/0
   160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   161 ;;      Params:         0       0       0       0       0       0       0       0       0
   162 ;;      Locals:         0       0       0       0       0       0       0       0       0
   163 ;;      Temps:          0       0       0       0       0       0       0       0       0
   164 ;;      Totals:         0       0       0       0       0       0       0       0       0
   165 ;;Total ram usage:        0 bytes
   166 ;; Hardware stack levels required when called:    4
   167 ;; This function calls:
   168 ;;		___awdiv
   169 ;;		___awmod
   170 ;;		_delay
   171 ;;		_lcd_write_char
   172 ;;		_lcdreset
   173 ;; This function is called by:
   174 ;;		Startup code after reset
   175 ;; This function uses a non-reentrant model
   176 ;;
   177                           
   178                           	psect	text0
   179  007E6A                     __ptext0:
   180                           	opt stack 0
   181  007E6A                     _main:
   182                           	opt stack 27
   183                           
   184                           ;newfile.c: 92: OSCCON=0X00;
   185                           
   186                           ;incstack = 0
   187  007E6A  0E00               	movlw	0
   188  007E6C  6ED3               	movwf	4051,c	;volatile
   189                           
   190                           ;newfile.c: 93: ADCON1=0X0f;
   191  007E6E  0E0F               	movlw	15
   192  007E70  6EC1               	movwf	4033,c	;volatile
   193                           
   194                           ;newfile.c: 94: TRISB=0B11000111;
   195  007E72  0EC7               	movlw	199
   196  007E74  6E93               	movwf	3987,c	;volatile
   197                           
   198                           ;newfile.c: 95: TRISD=0B00000000;
   199  007E76  0E00               	movlw	0
   200  007E78  6E95               	movwf	3989,c	;volatile
   201                           
   202                           ;newfile.c: 96: lcdreset();
   203  007E7A  EC90  F03E         	call	_lcdreset	;wreg free
   204                           
   205                           ;newfile.c: 97: lcd_write_char(0,0,'B');
   206  007E7E  0E00               	movlw	0
   207  007E80  6E09               	movwf	lcd_write_char@y,c
   208  007E82  0E42               	movlw	66
   209  007E84  6E0A               	movwf	lcd_write_char@buf,c
   210  007E86  0E00               	movlw	0
   211  007E88  EC4C  F03E         	call	_lcd_write_char
   212                           
   213                           ;newfile.c: 98: lcd_write_char(1,0,'o');
   214  007E8C  0E00               	movlw	0
   215  007E8E  6E09               	movwf	lcd_write_char@y,c
   216  007E90  0E6F               	movlw	111
   217  007E92  6E0A               	movwf	lcd_write_char@buf,c
   218  007E94  0E01               	movlw	1
   219  007E96  EC4C  F03E         	call	_lcd_write_char
   220                           
   221                           ;newfile.c: 99: lcd_write_char(2,0,'o');
   222  007E9A  0E00               	movlw	0
   223  007E9C  6E09               	movwf	lcd_write_char@y,c
   224  007E9E  0E6F               	movlw	111
   225  007EA0  6E0A               	movwf	lcd_write_char@buf,c
   226  007EA2  0E02               	movlw	2
   227  007EA4  EC4C  F03E         	call	_lcd_write_char
   228                           
   229                           ;newfile.c: 100: lcd_write_char(3,0,'t');
   230  007EA8  0E00               	movlw	0
   231  007EAA  6E09               	movwf	lcd_write_char@y,c
   232  007EAC  0E74               	movlw	116
   233  007EAE  6E0A               	movwf	lcd_write_char@buf,c
   234  007EB0  0E03               	movlw	3
   235  007EB2  EC4C  F03E         	call	_lcd_write_char
   236                           
   237                           ;newfile.c: 101: lcd_write_char(4,0,'i');
   238  007EB6  0E00               	movlw	0
   239  007EB8  6E09               	movwf	lcd_write_char@y,c
   240  007EBA  0E69               	movlw	105
   241  007EBC  6E0A               	movwf	lcd_write_char@buf,c
   242  007EBE  0E04               	movlw	4
   243  007EC0  EC4C  F03E         	call	_lcd_write_char
   244                           
   245                           ;newfile.c: 102: lcd_write_char(5,0,'n');
   246  007EC4  0E00               	movlw	0
   247  007EC6  6E09               	movwf	lcd_write_char@y,c
   248  007EC8  0E6E               	movlw	110
   249  007ECA  6E0A               	movwf	lcd_write_char@buf,c
   250  007ECC  0E05               	movlw	5
   251  007ECE  EC4C  F03E         	call	_lcd_write_char
   252                           
   253                           ;newfile.c: 103: lcd_write_char(6,0,'g');
   254  007ED2  0E00               	movlw	0
   255  007ED4  6E09               	movwf	lcd_write_char@y,c
   256  007ED6  0E67               	movlw	103
   257  007ED8  6E0A               	movwf	lcd_write_char@buf,c
   258  007EDA  0E06               	movlw	6
   259  007EDC  EC4C  F03E         	call	_lcd_write_char
   260                           
   261                           ;newfile.c: 104: lcd_write_char(7,0,'.');
   262  007EE0  0E00               	movlw	0
   263  007EE2  6E09               	movwf	lcd_write_char@y,c
   264  007EE4  0E2E               	movlw	46
   265  007EE6  6E0A               	movwf	lcd_write_char@buf,c
   266  007EE8  0E07               	movlw	7
   267  007EEA  EC4C  F03E         	call	_lcd_write_char
   268                           
   269                           ;newfile.c: 105: lcd_write_char(8,0,'.');
   270  007EEE  0E00               	movlw	0
   271  007EF0  6E09               	movwf	lcd_write_char@y,c
   272  007EF2  0E2E               	movlw	46
   273  007EF4  6E0A               	movwf	lcd_write_char@buf,c
   274  007EF6  0E08               	movlw	8
   275  007EF8  EC4C  F03E         	call	_lcd_write_char
   276                           
   277                           ;newfile.c: 106: lcd_write_char(9,0,'.');
   278  007EFC  0E00               	movlw	0
   279  007EFE  6E09               	movwf	lcd_write_char@y,c
   280  007F00  0E2E               	movlw	46
   281  007F02  6E0A               	movwf	lcd_write_char@buf,c
   282  007F04  0E09               	movlw	9
   283  007F06  EC4C  F03E         	call	_lcd_write_char
   284                           
   285                           ;newfile.c: 107: lcd_write_char(10,0,'.');
   286  007F0A  0E00               	movlw	0
   287  007F0C  6E09               	movwf	lcd_write_char@y,c
   288  007F0E  0E2E               	movlw	46
   289  007F10  6E0A               	movwf	lcd_write_char@buf,c
   290  007F12  0E0A               	movlw	10
   291  007F14  EC4C  F03E         	call	_lcd_write_char
   292                           
   293                           ;newfile.c: 108: lcd_write_char(11,0,'.');
   294  007F18  0E00               	movlw	0
   295  007F1A  6E09               	movwf	lcd_write_char@y,c
   296  007F1C  0E2E               	movlw	46
   297  007F1E  6E0A               	movwf	lcd_write_char@buf,c
   298  007F20  0E0B               	movlw	11
   299  007F22  EC4C  F03E         	call	_lcd_write_char
   300                           
   301                           ;newfile.c: 109: for(a=0;a<50;a++) delay(300);
   302  007F26  0E00               	movlw	0
   303  007F28  6E0D               	movwf	_a+1,c
   304  007F2A  0E00               	movlw	0
   305  007F2C  6E0C               	movwf	_a,c
   306  007F2E                     l1037:
   307  007F2E  500D               	movf	_a+1,w,c
   308  007F30  E10D               	bnz	l1047
   309  007F32  0E32               	movlw	50
   310  007F34  5C0C               	subwf	_a,w,c
   311  007F36  B0D8               	btfsc	status,0,c
   312  007F38  D009               	goto	l1047
   313  007F3A  0E01               	movlw	1
   314  007F3C  6E02               	movwf	delay@t+1,c
   315  007F3E  0E2C               	movlw	44
   316  007F40  6E01               	movwf	delay@t,c
   317  007F42  EC74  F03E         	call	_delay	;wreg free
   318  007F46  4A0C               	infsnz	_a,f,c
   319  007F48  2A0D               	incf	_a+1,f,c
   320  007F4A  D7F1               	goto	l1037
   321  007F4C                     l1047:
   322                           
   323                           ;newfile.c: 110: lcdreset();
   324  007F4C  EC90  F03E         	call	_lcdreset	;wreg free
   325  007F50                     l1049:
   326                           
   327                           ;newfile.c: 112: {
   328                           ;newfile.c: 114: if(++a>50000)
   329  007F50  4A0C               	infsnz	_a,f,c
   330  007F52  2A0D               	incf	_a+1,f,c
   331  007F54  0E51               	movlw	81
   332  007F56  5C0C               	subwf	_a,w,c
   333  007F58  0EC3               	movlw	195
   334  007F5A  580D               	subwfb	_a+1,w,c
   335  007F5C  A0D8               	btfss	status,0,c
   336  007F5E  D7F8               	goto	l1049
   337                           
   338                           ;newfile.c: 115: {
   339                           ;newfile.c: 116: a=0;
   340  007F60  0E00               	movlw	0
   341  007F62  6E0D               	movwf	_a+1,c
   342  007F64  0E00               	movlw	0
   343  007F66  6E0C               	movwf	_a,c
   344                           
   345                           ;newfile.c: 117: if(++b>10)
   346  007F68  2A0E               	incf	_b,f,c
   347  007F6A  0E0A               	movlw	10
   348  007F6C  640E               	cpfsgt	_b,c
   349  007F6E  D025               	goto	l1061
   350                           
   351                           ;newfile.c: 118: {
   352                           ;newfile.c: 119: b=0;
   353  007F70  0E00               	movlw	0
   354  007F72  6E0E               	movwf	_b,c
   355                           
   356                           ;newfile.c: 120: lcd_write_char(0,0,0x30+b/10);
   357  007F74  0E00               	movlw	0
   358  007F76  6E09               	movwf	lcd_write_char@y,c
   359  007F78  C00E  F001         	movff	_b,___awdiv@dividend
   360  007F7C  6A02               	clrf	___awdiv@dividend+1,c
   361  007F7E  0E00               	movlw	0
   362  007F80  6E04               	movwf	___awdiv@divisor+1,c
   363  007F82  0E0A               	movlw	10
   364  007F84  6E03               	movwf	___awdiv@divisor,c
   365  007F86  ECF3  F03E         	call	___awdiv	;wreg free
   366  007F8A  5001               	movf	?___awdiv,w,c
   367  007F8C  0F30               	addlw	48
   368  007F8E  6E0A               	movwf	lcd_write_char@buf,c
   369  007F90  0E00               	movlw	0
   370  007F92  EC4C  F03E         	call	_lcd_write_char
   371                           
   372                           ;newfile.c: 121: lcd_write_char(1,0,0x30+b%10);
   373  007F96  0E00               	movlw	0
   374  007F98  6E09               	movwf	lcd_write_char@y,c
   375  007F9A  C00E  F001         	movff	_b,___awmod@dividend
   376  007F9E  6A02               	clrf	___awmod@dividend+1,c
   377  007FA0  0E00               	movlw	0
   378  007FA2  6E04               	movwf	___awmod@divisor+1,c
   379  007FA4  0E0A               	movlw	10
   380  007FA6  6E03               	movwf	___awmod@divisor,c
   381  007FA8  ECBB  F03E         	call	___awmod	;wreg free
   382  007FAC  5001               	movf	?___awmod,w,c
   383  007FAE  0F30               	addlw	48
   384  007FB0  6E0A               	movwf	lcd_write_char@buf,c
   385  007FB2  0E01               	movlw	1
   386  007FB4  EC4C  F03E         	call	_lcd_write_char
   387  007FB8  D7FF               	goto	l67
   388  007FBA                     l1061:
   389                           
   390                           ;newfile.c: 123: }
   391                           ;newfile.c: 124: lcd_write_char(0,0,0x30+b/10);
   392  007FBA  0E00               	movlw	0
   393  007FBC  6E09               	movwf	lcd_write_char@y,c
   394  007FBE  C00E  F001         	movff	_b,___awdiv@dividend
   395  007FC2  6A02               	clrf	___awdiv@dividend+1,c
   396  007FC4  0E00               	movlw	0
   397  007FC6  6E04               	movwf	___awdiv@divisor+1,c
   398  007FC8  0E0A               	movlw	10
   399  007FCA  6E03               	movwf	___awdiv@divisor,c
   400  007FCC  ECF3  F03E         	call	___awdiv	;wreg free
   401  007FD0  5001               	movf	?___awdiv,w,c
   402  007FD2  0F30               	addlw	48
   403  007FD4  6E0A               	movwf	lcd_write_char@buf,c
   404  007FD6  0E00               	movlw	0
   405  007FD8  EC4C  F03E         	call	_lcd_write_char
   406                           
   407                           ;newfile.c: 125: lcd_write_char(1,0,0x30+b%10);
   408  007FDC  0E00               	movlw	0
   409  007FDE  6E09               	movwf	lcd_write_char@y,c
   410  007FE0  C00E  F001         	movff	_b,___awmod@dividend
   411  007FE4  6A02               	clrf	___awmod@dividend+1,c
   412  007FE6  0E00               	movlw	0
   413  007FE8  6E04               	movwf	___awmod@divisor+1,c
   414  007FEA  0E0A               	movlw	10
   415  007FEC  6E03               	movwf	___awmod@divisor,c
   416  007FEE  ECBB  F03E         	call	___awmod	;wreg free
   417  007FF2  5001               	movf	?___awmod,w,c
   418  007FF4  0F30               	addlw	48
   419  007FF6  6E0A               	movwf	lcd_write_char@buf,c
   420  007FF8  0E01               	movlw	1
   421  007FFA  EC4C  F03E         	call	_lcd_write_char
   422  007FFE  D7A8               	goto	l1049
   423  008000                     __end_of_main:
   424                           	opt stack 0
   425                           status	equ	0xFD8
   426                           
   427 ;; *************** function _lcdreset *****************
   428 ;; Defined at:
   429 ;;		line 69 in file "newfile.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;		None
   432 ;; Auto vars:     Size  Location     Type
   433 ;;		None
   434 ;; Return value:  Size  Location     Type
   435 ;;		None               void
   436 ;; Registers used:
   437 ;;		wreg, status,2, status,0, cstack
   438 ;; Tracked objects:
   439 ;;		On entry : 0/0
   440 ;;		On exit  : 0/0
   441 ;;		Unchanged: 0/0
   442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   443 ;;      Params:         0       0       0       0       0       0       0       0       0
   444 ;;      Locals:         0       0       0       0       0       0       0       0       0
   445 ;;      Temps:          0       0       0       0       0       0       0       0       0
   446 ;;      Totals:         0       0       0       0       0       0       0       0       0
   447 ;;Total ram usage:        0 bytes
   448 ;; Hardware stack levels used:    1
   449 ;; Hardware stack levels required when called:    2
   450 ;; This function calls:
   451 ;;		_delay
   452 ;;		_lcd_write_com
   453 ;;		_lcd_write_com_busy
   454 ;; This function is called by:
   455 ;;		_main
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text1
   460  007D20                     __ptext1:
   461                           	opt stack 0
   462  007D20                     _lcdreset:
   463                           	opt stack 28
   464                           
   465                           ;newfile.c: 71: delay(150);
   466                           
   467                           ;incstack = 0
   468  007D20  0E00               	movlw	0
   469  007D22  6E02               	movwf	delay@t+1,c
   470  007D24  0E96               	movlw	150
   471  007D26  6E01               	movwf	delay@t,c
   472  007D28  EC74  F03E         	call	_delay	;wreg free
   473                           
   474                           ;newfile.c: 72: lcd_write_com(0x38);
   475  007D2C  0E38               	movlw	56
   476  007D2E  EC43  F03E         	call	_lcd_write_com
   477                           
   478                           ;newfile.c: 73: delay(50);
   479  007D32  0E00               	movlw	0
   480  007D34  6E02               	movwf	delay@t+1,c
   481  007D36  0E32               	movlw	50
   482  007D38  6E01               	movwf	delay@t,c
   483  007D3A  EC74  F03E         	call	_delay	;wreg free
   484                           
   485                           ;newfile.c: 74: lcd_write_com(0x38);
   486  007D3E  0E38               	movlw	56
   487  007D40  EC43  F03E         	call	_lcd_write_com
   488                           
   489                           ;newfile.c: 75: delay(50);
   490  007D44  0E00               	movlw	0
   491  007D46  6E02               	movwf	delay@t+1,c
   492  007D48  0E32               	movlw	50
   493  007D4A  6E01               	movwf	delay@t,c
   494  007D4C  EC74  F03E         	call	_delay	;wreg free
   495                           
   496                           ;newfile.c: 76: lcd_write_com(0x38);
   497  007D50  0E38               	movlw	56
   498  007D52  EC43  F03E         	call	_lcd_write_com
   499                           
   500                           ;newfile.c: 77: lcd_write_com_busy(0x38);
   501  007D56  0E38               	movlw	56
   502  007D58  EC33  F03E         	call	_lcd_write_com_busy
   503                           
   504                           ;newfile.c: 78: lcd_write_com_busy(0x08);
   505  007D5C  0E08               	movlw	8
   506  007D5E  EC33  F03E         	call	_lcd_write_com_busy
   507                           
   508                           ;newfile.c: 79: lcd_write_com_busy(0x01);
   509  007D62  0E01               	movlw	1
   510  007D64  EC33  F03E         	call	_lcd_write_com_busy
   511                           
   512                           ;newfile.c: 80: lcd_write_com_busy(0x06);
   513  007D68  0E06               	movlw	6
   514  007D6A  EC33  F03E         	call	_lcd_write_com_busy
   515                           
   516                           ;newfile.c: 81: lcd_write_com_busy(0x0c);
   517  007D6E  0E0C               	movlw	12
   518  007D70  EC33  F03E         	call	_lcd_write_com_busy
   519  007D74  0012               	return		;funcret
   520  007D76                     __end_of_lcdreset:
   521                           	opt stack 0
   522                           status	equ	0xFD8
   523                           
   524 ;; *************** function _delay *****************
   525 ;; Defined at:
   526 ;;		line 12 in file "newfile.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  t               2    0[COMRAM] unsigned int 
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  j               2    4[COMRAM] unsigned int 
   531 ;;  i               2    2[COMRAM] unsigned int 
   532 ;; Return value:  Size  Location     Type
   533 ;;		None               void
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   541 ;;      Params:         2       0       0       0       0       0       0       0       0
   542 ;;      Locals:         4       0       0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0
   544 ;;      Totals:         6       0       0       0       0       0       0       0       0
   545 ;;Total ram usage:        6 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; This function calls:
   548 ;;		Nothing
   549 ;; This function is called by:
   550 ;;		_lcdreset
   551 ;;		_main
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text2
   556  007CE8                     __ptext2:
   557                           	opt stack 0
   558  007CE8                     _delay:
   559                           	opt stack 29
   560                           
   561                           ;newfile.c: 14: unsigned int i,j;
   562                           ;newfile.c: 15: for(i=0;i<t;i++)
   563                           
   564                           ;incstack = 0
   565  007CE8  0E00               	movlw	0
   566  007CEA  6E04               	movwf	delay@i+1,c
   567  007CEC  0E00               	movlw	0
   568  007CEE  6E03               	movwf	delay@i,c
   569  007CF0  D010               	goto	l893
   570  007CF2                     l881:
   571                           
   572                           ;newfile.c: 16: {
   573                           ;newfile.c: 17: for(j=0;j<10;j++) asm("CLRWDT");
   574  007CF2  0E00               	movlw	0
   575  007CF4  6E06               	movwf	delay@j+1,c
   576  007CF6  0E00               	movlw	0
   577  007CF8  6E05               	movwf	delay@j,c
   578  007CFA                     l883:
   579  007CFA  5006               	movf	delay@j+1,w,c
   580  007CFC  E108               	bnz	l891
   581  007CFE  0E0A               	movlw	10
   582  007D00  5C05               	subwf	delay@j,w,c
   583  007D02  B0D8               	btfsc	status,0,c
   584  007D04  D004               	goto	l891
   585  007D06  0004               	clrwdt		;# 
   586  007D08  4A05               	infsnz	delay@j,f,c
   587  007D0A  2A06               	incf	delay@j+1,f,c
   588  007D0C  D7F6               	goto	l883
   589  007D0E                     l891:
   590  007D0E  4A03               	infsnz	delay@i,f,c
   591  007D10  2A04               	incf	delay@i+1,f,c
   592  007D12                     l893:
   593  007D12  5001               	movf	delay@t,w,c
   594  007D14  5C03               	subwf	delay@i,w,c
   595  007D16  5002               	movf	delay@t+1,w,c
   596  007D18  5804               	subwfb	delay@i+1,w,c
   597  007D1A  B0D8               	btfsc	status,0,c
   598  007D1C  0012               	return	
   599  007D1E  D7E9               	goto	l881
   600  007D20                     __end_of_delay:
   601                           	opt stack 0
   602                           status	equ	0xFD8
   603                           
   604 ;; *************** function _lcd_write_char *****************
   605 ;; Defined at:
   606 ;;		line 84 in file "newfile.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  x               1    wreg     unsigned char 
   609 ;;  y               1    8[COMRAM] unsigned char 
   610 ;;  buf             1    9[COMRAM] unsigned char 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  x               1   10[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;		None               void
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         2       0       0       0       0       0       0       0       0
   623 ;;      Locals:         1       0       0       0       0       0       0       0       0
   624 ;;      Temps:          0       0       0       0       0       0       0       0       0
   625 ;;      Totals:         3       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:        3 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    3
   629 ;; This function calls:
   630 ;;		_lcd_write_address
   631 ;;		_lcd_write_data
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text3
   638  007C98                     __ptext3:
   639                           	opt stack 0
   640  007C98                     _lcd_write_char:
   641                           	opt stack 27
   642                           
   643                           ;incstack = 0
   644                           ;lcd_write_char@x stored from wreg
   645  007C98  6E0B               	movwf	lcd_write_char@x,c
   646                           
   647                           ;newfile.c: 86: lcd_write_address(x,y);
   648  007C9A  C009  F003         	movff	lcd_write_char@y,lcd_write_address@y
   649  007C9E  500B               	movf	lcd_write_char@x,w,c
   650  007CA0  EC61  F03E         	call	_lcd_write_address
   651                           
   652                           ;newfile.c: 87: lcd_write_data(buf);
   653  007CA4  500A               	movf	lcd_write_char@buf,w,c
   654  007CA6  EC56  F03E         	call	_lcd_write_data
   655  007CAA  0012               	return		;funcret
   656  007CAC                     __end_of_lcd_write_char:
   657                           	opt stack 0
   658                           status	equ	0xFD8
   659                           
   660 ;; *************** function _lcd_write_data *****************
   661 ;; Defined at:
   662 ;;		line 48 in file "newfile.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;  databuf         1    wreg     unsigned char 
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  databuf         1    0[COMRAM] unsigned char 
   667 ;; Return value:  Size  Location     Type
   668 ;;		None               void
   669 ;; Registers used:
   670 ;;		wreg, cstack
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   676 ;;      Params:         0       0       0       0       0       0       0       0       0
   677 ;;      Locals:         1       0       0       0       0       0       0       0       0
   678 ;;      Temps:          0       0       0       0       0       0       0       0       0
   679 ;;      Totals:         1       0       0       0       0       0       0       0       0
   680 ;;Total ram usage:        1 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; Hardware stack levels required when called:    1
   683 ;; This function calls:
   684 ;;		_lcd_wait_busy
   685 ;; This function is called by:
   686 ;;		_lcd_write_char
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text4
   691  007CAC                     __ptext4:
   692                           	opt stack 0
   693  007CAC                     _lcd_write_data:
   694                           	opt stack 28
   695                           
   696                           ;incstack = 0
   697                           ;lcd_write_data@databuf stored from wreg
   698  007CAC  6E01               	movwf	lcd_write_data@databuf,c
   699                           
   700                           ;newfile.c: 50: lcd_wait_busy();
   701  007CAE  EC3A  F03E         	call	_lcd_wait_busy	;wreg free
   702                           
   703                           ;newfile.c: 51: RB5=1;
   704  007CB2  8A81               	bsf	3969,5,c	;volatile
   705                           
   706                           ;newfile.c: 52: RB4=0;
   707  007CB4  9881               	bcf	3969,4,c	;volatile
   708                           
   709                           ;newfile.c: 53: PORTD=databuf;
   710  007CB6  C001  FF83         	movff	lcd_write_data@databuf,3971	;volatile
   711                           
   712                           ;newfile.c: 54: RB3=1;
   713  007CBA  8681               	bsf	3969,3,c	;volatile
   714  007CBC  F000               	nop		;# 
   715                           
   716                           ;newfile.c: 56: RB3=0;
   717  007CBE  9681               	bcf	3969,3,c	;volatile
   718  007CC0  0012               	return		;funcret
   719  007CC2                     __end_of_lcd_write_data:
   720                           	opt stack 0
   721                           status	equ	0xFD8
   722                           
   723 ;; *************** function _lcd_write_address *****************
   724 ;; Defined at:
   725 ;;		line 59 in file "newfile.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;  x               1    wreg     unsigned char 
   728 ;;  y               1    2[COMRAM] unsigned char 
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  x               1    3[COMRAM] unsigned char 
   731 ;; Return value:  Size  Location     Type
   732 ;;		None               void
   733 ;; Registers used:
   734 ;;		wreg, status,2, status,0, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   740 ;;      Params:         1       0       0       0       0       0       0       0       0
   741 ;;      Locals:         1       0       0       0       0       0       0       0       0
   742 ;;      Temps:          0       0       0       0       0       0       0       0       0
   743 ;;      Totals:         2       0       0       0       0       0       0       0       0
   744 ;;Total ram usage:        2 bytes
   745 ;; Hardware stack levels used:    1
   746 ;; Hardware stack levels required when called:    2
   747 ;; This function calls:
   748 ;;		_lcd_write_com_busy
   749 ;; This function is called by:
   750 ;;		_lcd_write_char
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text5
   755  007CC2                     __ptext5:
   756                           	opt stack 0
   757  007CC2                     _lcd_write_address:
   758                           	opt stack 27
   759                           
   760                           ;incstack = 0
   761                           ;lcd_write_address@x stored from wreg
   762  007CC2  6E04               	movwf	lcd_write_address@x,c
   763                           
   764                           ;newfile.c: 61: x&=0x0f;
   765  007CC4  0E0F               	movlw	15
   766  007CC6  1604               	andwf	lcd_write_address@x,f,c
   767                           
   768                           ;newfile.c: 62: y&=0x01;
   769  007CC8  0E01               	movlw	1
   770  007CCA  1603               	andwf	lcd_write_address@y,f,c
   771                           
   772                           ;newfile.c: 63: if(y==0x00)
   773  007CCC  5003               	movf	lcd_write_address@y,w,c
   774  007CCE  A4D8               	btfss	status,2,c
   775  007CD0  D005               	goto	l901
   776                           
   777                           ;newfile.c: 64: lcd_write_com_busy(x|0x80);
   778  007CD2  5004               	movf	lcd_write_address@x,w,c
   779  007CD4  0980               	iorlw	128
   780  007CD6  EC33  F03E         	call	_lcd_write_com_busy
   781  007CDA  0012               	return	
   782  007CDC                     l901:
   783                           
   784                           ;newfile.c: 65: else
   785                           ;newfile.c: 66: lcd_write_com_busy((x+0x40)|0x80);
   786  007CDC  5004               	movf	lcd_write_address@x,w,c
   787  007CDE  0F40               	addlw	64
   788  007CE0  0980               	iorlw	128
   789  007CE2  EC33  F03E         	call	_lcd_write_com_busy
   790  007CE6  0012               	return	
   791  007CE8                     __end_of_lcd_write_address:
   792                           	opt stack 0
   793                           status	equ	0xFD8
   794                           
   795 ;; *************** function _lcd_write_com_busy *****************
   796 ;; Defined at:
   797 ;;		line 42 in file "newfile.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  combuf          1    wreg     unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  combuf          1    1[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;		None               void
   804 ;; Registers used:
   805 ;;		wreg, status,2, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         0       0       0       0       0       0       0       0       0
   812 ;;      Locals:         1       0       0       0       0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0       0       0
   814 ;;      Totals:         1       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        1 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    1
   818 ;; This function calls:
   819 ;;		_lcd_wait_busy
   820 ;;		_lcd_write_com
   821 ;; This function is called by:
   822 ;;		_lcd_write_address
   823 ;;		_lcdreset
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text6
   828  007C66                     __ptext6:
   829                           	opt stack 0
   830  007C66                     _lcd_write_com_busy:
   831                           	opt stack 28
   832                           
   833                           ;incstack = 0
   834                           ;lcd_write_com_busy@combuf stored from wreg
   835  007C66  6E02               	movwf	lcd_write_com_busy@combuf,c
   836                           
   837                           ;newfile.c: 44: lcd_wait_busy();
   838  007C68  EC3A  F03E         	call	_lcd_wait_busy	;wreg free
   839                           
   840                           ;newfile.c: 45: lcd_write_com(combuf);
   841  007C6C  5002               	movf	lcd_write_com_busy@combuf,w,c
   842  007C6E  EC43  F03E         	call	_lcd_write_com
   843  007C72  0012               	return		;funcret
   844  007C74                     __end_of_lcd_write_com_busy:
   845                           	opt stack 0
   846                           status	equ	0xFD8
   847                           
   848 ;; *************** function _lcd_write_com *****************
   849 ;; Defined at:
   850 ;;		line 32 in file "newfile.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  combuf          1    wreg     unsigned char 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  combuf          1    0[COMRAM] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;		None               void
   857 ;; Registers used:
   858 ;;		wreg
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   864 ;;      Params:         0       0       0       0       0       0       0       0       0
   865 ;;      Locals:         1       0       0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0       0       0
   867 ;;      Totals:         1       0       0       0       0       0       0       0       0
   868 ;;Total ram usage:        1 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_lcd_write_com_busy
   874 ;;		_lcdreset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text7
   879  007C86                     __ptext7:
   880                           	opt stack 0
   881  007C86                     _lcd_write_com:
   882                           	opt stack 28
   883                           
   884                           ;incstack = 0
   885                           ;lcd_write_com@combuf stored from wreg
   886  007C86  6E01               	movwf	lcd_write_com@combuf,c
   887                           
   888                           ;newfile.c: 34: RB5=0;
   889  007C88  9A81               	bcf	3969,5,c	;volatile
   890                           
   891                           ;newfile.c: 35: RB4=0;
   892  007C8A  9881               	bcf	3969,4,c	;volatile
   893                           
   894                           ;newfile.c: 36: PORTD=combuf;
   895  007C8C  C001  FF83         	movff	lcd_write_com@combuf,3971	;volatile
   896                           
   897                           ;newfile.c: 37: RB3=1;
   898  007C90  8681               	bsf	3969,3,c	;volatile
   899  007C92  F000               	nop		;# 
   900                           
   901                           ;newfile.c: 39: RB3=0;
   902  007C94  9681               	bcf	3969,3,c	;volatile
   903  007C96  0012               	return		;funcret
   904  007C98                     __end_of_lcd_write_com:
   905                           	opt stack 0
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _lcd_wait_busy *****************
   909 ;; Defined at:
   910 ;;		line 21 in file "newfile.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;		None               void
   917 ;; Registers used:
   918 ;;		None
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   924 ;;      Params:         0       0       0       0       0       0       0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0
   927 ;;      Totals:         0       0       0       0       0       0       0       0       0
   928 ;;Total ram usage:        0 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; This function calls:
   931 ;;		Nothing
   932 ;; This function is called by:
   933 ;;		_lcd_write_com_busy
   934 ;;		_lcd_write_data
   935 ;; This function uses a non-reentrant model
   936 ;;
   937                           
   938                           	psect	text8
   939  007C74                     __ptext8:
   940                           	opt stack 0
   941  007C74                     _lcd_wait_busy:
   942                           	opt stack 28
   943                           
   944                           ;newfile.c: 23: TRISD7=1;
   945                           
   946                           ;incstack = 0
   947  007C74  8E95               	bsf	3989,7,c	;volatile
   948                           
   949                           ;newfile.c: 24: RB5=0;
   950  007C76  9A81               	bcf	3969,5,c	;volatile
   951                           
   952                           ;newfile.c: 25: RB4=1;
   953  007C78  8881               	bsf	3969,4,c	;volatile
   954                           
   955                           ;newfile.c: 26: RB3=1;
   956  007C7A  8681               	bsf	3969,3,c	;volatile
   957  007C7C                     l35:
   958  007C7C  BE83               	btfsc	3971,7,c	;volatile
   959  007C7E  D7FE               	goto	l35
   960                           
   961                           ;newfile.c: 28: RB3=0;
   962  007C80  9681               	bcf	3969,3,c	;volatile
   963                           
   964                           ;newfile.c: 29: TRISD7=0;
   965  007C82  9E95               	bcf	3989,7,c	;volatile
   966  007C84  0012               	return		;funcret
   967  007C86                     __end_of_lcd_wait_busy:
   968                           	opt stack 0
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function ___awmod *****************
   972 ;; Defined at:
   973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awmod.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  dividend        2    0[COMRAM] int 
   976 ;;  divisor         2    2[COMRAM] int 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  sign            1    5[COMRAM] unsigned char 
   979 ;;  counter         1    4[COMRAM] unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  2    0[COMRAM] int 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   989 ;;      Params:         4       0       0       0       0       0       0       0       0
   990 ;;      Locals:         2       0       0       0       0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0
   992 ;;      Totals:         6       0       0       0       0       0       0       0       0
   993 ;;Total ram usage:        6 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text9
  1003  007D76                     __ptext9:
  1004                           	opt stack 0
  1005  007D76                     ___awmod:
  1006                           	opt stack 30
  1007                           
  1008                           ;incstack = 0
  1009  007D76  0E00               	movlw	0
  1010  007D78  6E06               	movwf	___awmod@sign,c
  1011  007D7A  AE02               	btfss	___awmod@dividend+1,7,c
  1012  007D7C  D006               	goto	l979
  1013  007D7E  6C01               	negf	___awmod@dividend,c
  1014  007D80  1E02               	comf	___awmod@dividend+1,f,c
  1015  007D82  B0D8               	btfsc	status,0,c
  1016  007D84  2A02               	incf	___awmod@dividend+1,f,c
  1017  007D86  0E01               	movlw	1
  1018  007D88  6E06               	movwf	___awmod@sign,c
  1019  007D8A                     l979:
  1020  007D8A  AE04               	btfss	___awmod@divisor+1,7,c
  1021  007D8C  D004               	goto	l983
  1022  007D8E  6C03               	negf	___awmod@divisor,c
  1023  007D90  1E04               	comf	___awmod@divisor+1,f,c
  1024  007D92  B0D8               	btfsc	status,0,c
  1025  007D94  2A04               	incf	___awmod@divisor+1,f,c
  1026  007D96                     l983:
  1027  007D96  5003               	movf	___awmod@divisor,w,c
  1028  007D98  1004               	iorwf	___awmod@divisor+1,w,c
  1029  007D9A  B4D8               	btfsc	status,2,c
  1030  007D9C  D018               	goto	l999
  1031  007D9E  0E01               	movlw	1
  1032  007DA0  6E05               	movwf	___awmod@counter,c
  1033  007DA2  D004               	goto	l989
  1034  007DA4                     l987:
  1035  007DA4  90D8               	bcf	status,0,c
  1036  007DA6  3603               	rlcf	___awmod@divisor,f,c
  1037  007DA8  3604               	rlcf	___awmod@divisor+1,f,c
  1038  007DAA  2A05               	incf	___awmod@counter,f,c
  1039  007DAC                     l989:
  1040  007DAC  AE04               	btfss	___awmod@divisor+1,7,c
  1041  007DAE  D7FA               	goto	l987
  1042  007DB0                     l991:
  1043  007DB0  5003               	movf	___awmod@divisor,w,c
  1044  007DB2  5C01               	subwf	___awmod@dividend,w,c
  1045  007DB4  5004               	movf	___awmod@divisor+1,w,c
  1046  007DB6  5802               	subwfb	___awmod@dividend+1,w,c
  1047  007DB8  A0D8               	btfss	status,0,c
  1048  007DBA  D004               	goto	l995
  1049  007DBC  5003               	movf	___awmod@divisor,w,c
  1050  007DBE  5E01               	subwf	___awmod@dividend,f,c
  1051  007DC0  5004               	movf	___awmod@divisor+1,w,c
  1052  007DC2  5A02               	subwfb	___awmod@dividend+1,f,c
  1053  007DC4                     l995:
  1054  007DC4  90D8               	bcf	status,0,c
  1055  007DC6  3204               	rrcf	___awmod@divisor+1,f,c
  1056  007DC8  3203               	rrcf	___awmod@divisor,f,c
  1057  007DCA  2E05               	decfsz	___awmod@counter,f,c
  1058  007DCC  D7F1               	goto	l991
  1059  007DCE                     l999:
  1060  007DCE  5006               	movf	___awmod@sign,w,c
  1061  007DD0  B4D8               	btfsc	status,2,c
  1062  007DD2  D004               	goto	l1003
  1063  007DD4  6C01               	negf	___awmod@dividend,c
  1064  007DD6  1E02               	comf	___awmod@dividend+1,f,c
  1065  007DD8  B0D8               	btfsc	status,0,c
  1066  007DDA  2A02               	incf	___awmod@dividend+1,f,c
  1067  007DDC                     l1003:
  1068  007DDC  C001  F001         	movff	___awmod@dividend,?___awmod
  1069  007DE0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1070  007DE4  0012               	return	
  1071  007DE6                     __end_of___awmod:
  1072                           	opt stack 0
  1073                           status	equ	0xFD8
  1074                           
  1075 ;; *************** function ___awdiv *****************
  1076 ;; Defined at:
  1077 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  dividend        2    0[COMRAM] int 
  1080 ;;  divisor         2    2[COMRAM] int 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  quotient        2    6[COMRAM] int 
  1083 ;;  sign            1    5[COMRAM] unsigned char 
  1084 ;;  counter         1    4[COMRAM] unsigned char 
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  2    0[COMRAM] int 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1094 ;;      Params:         4       0       0       0       0       0       0       0       0
  1095 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1097 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1098 ;;Total ram usage:        8 bytes
  1099 ;; Hardware stack levels used:    1
  1100 ;; This function calls:
  1101 ;;		Nothing
  1102 ;; This function is called by:
  1103 ;;		_main
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           	psect	text10
  1108  007DE6                     __ptext10:
  1109                           	opt stack 0
  1110  007DE6                     ___awdiv:
  1111                           	opt stack 30
  1112                           
  1113                           ;incstack = 0
  1114  007DE6  0E00               	movlw	0
  1115  007DE8  6E06               	movwf	___awdiv@sign,c
  1116  007DEA  AE04               	btfss	___awdiv@divisor+1,7,c
  1117  007DEC  D006               	goto	l935
  1118  007DEE  6C03               	negf	___awdiv@divisor,c
  1119  007DF0  1E04               	comf	___awdiv@divisor+1,f,c
  1120  007DF2  B0D8               	btfsc	status,0,c
  1121  007DF4  2A04               	incf	___awdiv@divisor+1,f,c
  1122  007DF6  0E01               	movlw	1
  1123  007DF8  6E06               	movwf	___awdiv@sign,c
  1124  007DFA                     l935:
  1125  007DFA  AE02               	btfss	___awdiv@dividend+1,7,c
  1126  007DFC  D006               	goto	l941
  1127  007DFE  6C01               	negf	___awdiv@dividend,c
  1128  007E00  1E02               	comf	___awdiv@dividend+1,f,c
  1129  007E02  B0D8               	btfsc	status,0,c
  1130  007E04  2A02               	incf	___awdiv@dividend+1,f,c
  1131  007E06  0E01               	movlw	1
  1132  007E08  1A06               	xorwf	___awdiv@sign,f,c
  1133  007E0A                     l941:
  1134  007E0A  0E00               	movlw	0
  1135  007E0C  6E08               	movwf	___awdiv@quotient+1,c
  1136  007E0E  0E00               	movlw	0
  1137  007E10  6E07               	movwf	___awdiv@quotient,c
  1138  007E12  5003               	movf	___awdiv@divisor,w,c
  1139  007E14  1004               	iorwf	___awdiv@divisor+1,w,c
  1140  007E16  B4D8               	btfsc	status,2,c
  1141  007E18  D01C               	goto	l963
  1142  007E1A  0E01               	movlw	1
  1143  007E1C  6E05               	movwf	___awdiv@counter,c
  1144  007E1E  D004               	goto	l949
  1145  007E20                     l947:
  1146  007E20  90D8               	bcf	status,0,c
  1147  007E22  3603               	rlcf	___awdiv@divisor,f,c
  1148  007E24  3604               	rlcf	___awdiv@divisor+1,f,c
  1149  007E26  2A05               	incf	___awdiv@counter,f,c
  1150  007E28                     l949:
  1151  007E28  AE04               	btfss	___awdiv@divisor+1,7,c
  1152  007E2A  D7FA               	goto	l947
  1153  007E2C                     l951:
  1154  007E2C  90D8               	bcf	status,0,c
  1155  007E2E  3607               	rlcf	___awdiv@quotient,f,c
  1156  007E30  3608               	rlcf	___awdiv@quotient+1,f,c
  1157  007E32  5003               	movf	___awdiv@divisor,w,c
  1158  007E34  5C01               	subwf	___awdiv@dividend,w,c
  1159  007E36  5004               	movf	___awdiv@divisor+1,w,c
  1160  007E38  5802               	subwfb	___awdiv@dividend+1,w,c
  1161  007E3A  A0D8               	btfss	status,0,c
  1162  007E3C  D005               	goto	l959
  1163  007E3E  5003               	movf	___awdiv@divisor,w,c
  1164  007E40  5E01               	subwf	___awdiv@dividend,f,c
  1165  007E42  5004               	movf	___awdiv@divisor+1,w,c
  1166  007E44  5A02               	subwfb	___awdiv@dividend+1,f,c
  1167  007E46  8007               	bsf	___awdiv@quotient,0,c
  1168  007E48                     l959:
  1169  007E48  90D8               	bcf	status,0,c
  1170  007E4A  3204               	rrcf	___awdiv@divisor+1,f,c
  1171  007E4C  3203               	rrcf	___awdiv@divisor,f,c
  1172  007E4E  2E05               	decfsz	___awdiv@counter,f,c
  1173  007E50  D7ED               	goto	l951
  1174  007E52                     l963:
  1175  007E52  5006               	movf	___awdiv@sign,w,c
  1176  007E54  B4D8               	btfsc	status,2,c
  1177  007E56  D004               	goto	l967
  1178  007E58  6C07               	negf	___awdiv@quotient,c
  1179  007E5A  1E08               	comf	___awdiv@quotient+1,f,c
  1180  007E5C  B0D8               	btfsc	status,0,c
  1181  007E5E  2A08               	incf	___awdiv@quotient+1,f,c
  1182  007E60                     l967:
  1183  007E60  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1184  007E64  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1185  007E68  0012               	return	
  1186  007E6A                     __end_of___awdiv:
  1187                           	opt stack 0
  1188  0000                     status	equ	0xFD8
  1189                           status	equ	0xFD8
  1190                           
  1191                           	psect	rparam
  1192  0000                     status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_lcd_write_char
    _lcdreset->_delay
    _lcd_write_char->___awdiv
    _lcd_write_address->_lcd_write_com_busy
    _lcd_write_com_busy->_lcd_write_com

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3111
                            ___awdiv
                            ___awmod
                              _delay
                     _lcd_write_char
                           _lcdreset
 ---------------------------------------------------------------------------------
 (1) _lcdreset                                             0     0      0     309
                              _delay
                      _lcd_write_com
                 _lcd_write_com_busy
 ---------------------------------------------------------------------------------
 (2) _delay                                                6     4      2     264
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _lcd_write_char                                       3     1      2    1598
                                              8 COMRAM     3     1      2
                            ___awdiv (ARG)
                            ___awmod (ARG)
                  _lcd_write_address
                     _lcd_write_data
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data                                       1     1      0      15
                                              0 COMRAM     1     1      0
                      _lcd_wait_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_write_address                                    2     1      1     141
                                              2 COMRAM     2     1      1
                 _lcd_write_com_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_write_com_busy                                   1     1      0      30
                                              1 COMRAM     1     1      0
                      _lcd_wait_busy
                      _lcd_write_com
 ---------------------------------------------------------------------------------
 (3) _lcd_write_com                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcd_wait_busy                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     468
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     472
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _delay
   _lcd_write_char
     ___awdiv (ARG)
     ___awmod (ARG)
     _lcd_write_address (ARG)
       _lcd_write_com_busy
         _lcd_wait_busy
         _lcd_write_com
     _lcd_write_data (ARG)
       _lcd_wait_busy
   _lcdreset
     _delay
     _lcd_write_com
     _lcd_write_com_busy
       _lcd_wait_busy
       _lcd_write_com

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B       E       1       14.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E      20        0.0%
DATA                 0      0       E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Aug 26 21:29:49 2015

                          _a 000C                            _b 000E                           l35 7C7C  
                         l67 7FB8                 ___awdiv@sign 0006                  __CFG_BORV$1 000000  
                __CFG_WDT$ON 000000                          l901 7CDC                          l941 7E0A  
                        l951 7E2C                          l935 7DFA                          l881 7CF2  
                        l947 7E20                          l963 7E52                          l891 7D0E  
                        l883 7CFA                          l949 7E28                          l893 7D12  
                        l967 7E60                          l959 7E48                          l991 7DB0  
                        l983 7D96                          l995 7DC4                          l987 7DA4  
                        l979 7D8A                          l989 7DAC                          l999 7DCE  
                        _RB3 007C0B                          _RB4 007C0C                          _RB5 007C0D  
                        _RD7 007C1F               ?_lcd_wait_busy 0001                 ___awmod@sign 0006  
               __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000                         l1003 7DDC  
                       l1061 7FBA                         l1037 7F2E                         l1047 7F4C  
                       l1049 7F50              lcd_write_char@x 000B              lcd_write_char@y 0009  
      lcd_write_data@databuf 0001       __end_of_lcd_write_char 7CAC       __end_of_lcd_write_data 7CC2  
                       _main 7E6A               ?_lcd_write_com 0001                         start 0000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000010                        ?_main 0001  
            __end_of___awdiv 7E6A              __end_of___awmod 7DE6              ___awdiv@divisor 0003  
            ___awdiv@counter 0005                        _PORTD 000F83                        _TRISB 000F93  
                      _TRISD 000F95                        _delay 7CE8              ?_lcd_write_char 0009  
            ?_lcd_write_data 0001                        status 000FD8   __size_of_lcd_write_address 0026  
            __initialization 7C5A                 __end_of_main 8000              ??_lcd_wait_busy 0001  
                     ??_main 000C                __activetblptr 000000                       ?_delay 0001  
                     _ADCON1 000FC1             ___awdiv@dividend 0001                       _OSCCON 000FD3  
            ??_lcd_write_com 0001                       _TRISD7 007CAF            lcd_write_char@buf 000A  
             __CFG_XINST$OFF 000000             __end_of_lcdreset 7D76                    ??___awdiv 0005  
                  ??___awmod 0005                       delay@i 0003                       delay@j 0005  
                     delay@t 0001             ___awdiv@quotient 0007              ___awmod@divisor 0003  
            ___awmod@counter 0005     lcd_write_com_busy@combuf 0002                   __accesstop 0060  
    __end_of__initialization 7C60              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
__size_of_lcd_write_com_busy 000E               __pcstackCOMRAM 0001                __end_of_delay 7D20  
                    ??_delay 0003             ??_lcd_write_char 000B             ??_lcd_write_data 0001  
         lcd_write_address@x 0004           lcd_write_address@y 0003                    ?_lcdreset 0001  
                    __Hparam 0000                      __Lparam 0000                      ___awdiv 7DE6  
                    ___awmod 7D76                      __pcinit 7C5A                      __ramtop 0800  
                    __ptext0 7E6A                      __ptext1 7D20                      __ptext2 7CE8  
                    __ptext3 7C98                      __ptext4 7CAC                      __ptext5 7CC2  
                    __ptext6 7C66                      __ptext7 7C86                      __ptext8 7C74  
                    __ptext9 7D76             ___awmod@dividend 0001         end_of_initialization 7C60  
                 ??_lcdreset 0007        __end_of_lcd_wait_busy 7C86        __end_of_lcd_write_com 7C98  
        start_initialization 7C5A   __end_of_lcd_write_com_busy 7C74           __CFG_BOR$ON_ACTIVE 000000  
                __pbssCOMRAM 000C            __size_of_lcdreset 0056                     ?___awdiv 0001  
                   ?___awmod 0001               __size_of_delay 0038          lcd_write_com@combuf 0001  
    __size_of_lcd_write_char 0014      __size_of_lcd_write_data 0016                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___awdiv 0084             __size_of___awmod 0070  
                   __ptext10 7DE6                     _lcdreset 7D20                __size_of_main 0196  
     __size_of_lcd_wait_busy 0012           _lcd_write_com_busy 7C66       __size_of_lcd_write_com 0012  
        ?_lcd_write_com_busy 0001         ??_lcd_write_com_busy 0002            _lcd_write_address 7CC2  
         ?_lcd_write_address 0003          ??_lcd_write_address 0004                _lcd_wait_busy 7C74  
             _lcd_write_char 7C98               _lcd_write_data 7CAC    __end_of_lcd_write_address 7CE8  
              _lcd_write_com 7C86  
